<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>全科-不安分的码农</title>
  
  <subtitle>android，ios，html5，微服务架构，XP，scrum，项目管理（PMP）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://quanke.name/"/>
  <updated>2018-03-02T09:41:38.784Z</updated>
  <id>http://quanke.name/</id>
  
  <author>
    <name>全科</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 与 Kotlin 定时任务（Scheduling Tasks）</title>
    <link href="http://quanke.name/posts/30080/"/>
    <id>http://quanke.name/posts/30080/</id>
    <published>2018-02-03T14:58:06.000Z</published>
    <updated>2018-03-02T09:41:38.784Z</updated>
    
    <content type="html"><![CDATA[<p>在编写Spring Boot应用中会遇到这样的场景，比如：需要定时地发送一些短信、邮件之类的操作，也可能会定时地检查和监控一些标志、参数等。</p><h2 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h2><p>在Spring Boot中编写定时任务是非常简单的事，下面通过实例介绍如何在Spring Boot中创建定时任务，实现每过5秒输出一下当前时间。</p><p>在Spring Boot的主类中加入<code>@EnableScheduling</code>注解，启用定时任务的配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line">import org.springframework.scheduling.annotation.EnableScheduling</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">@EnableScheduling</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="创建定时任务实现类"><a href="#创建定时任务实现类" class="headerlink" title="创建定时任务实现类"></a>创建定时任务实现类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.apache.commons.logging.LogFactory</div><div class="line">import org.springframework.scheduling.annotation.Scheduled</div><div class="line">import org.springframework.stereotype.Component</div><div class="line">import java.text.SimpleDateFormat</div><div class="line">import java.util.*</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">class ScheduledTasks &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ScheduledTasks::class.java)!!</div><div class="line"></div><div class="line">    private val dateFormat = SimpleDateFormat(&quot;HH:mm:ss&quot;)</div><div class="line"></div><div class="line">    @Scheduled(fixedRate = 1000)</div><div class="line">    fun reportCurrentTime() &#123;</div><div class="line">        log.info(&quot;现在时间 , $&#123;dateFormat.format(Date())&#125;&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行程序，控制台中可以看到类似如下输出，定时任务开始正常运作了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2018-01-21 23:09:01.112  INFO 23832 --- [           main] n.q.kotlin.chaper11_8_1.ApplicationKt    : Started ApplicationKt in 8.024 seconds (JVM running for 8.724)</div><div class="line">2018-01-21 23:09:02.112  INFO 23832 --- [pool-2-thread-1] n.q.k.chaper11_8_1.task.ScheduledTasks   : 现在时间 , 23:09:02</div><div class="line">2018-01-21 23:09:03.042  INFO 23832 --- [pool-2-thread-1] n.q.k.chaper11_8_1.task.ScheduledTasks   : 现在时间 , 23:09:03</div><div class="line">2018-01-21 23:09:04.042  INFO 23832 --- [pool-2-thread-1] n.q.k.chaper11_8_1.task.ScheduledTasks   : 现在时间 , 23:09:04</div><div class="line">2018-01-21 23:09:05.042  INFO 23832 --- [pool-2-thread-1] n.q.k.chaper11_8_1.task.ScheduledTasks   : 现在时间 , 23:09:05</div></pre></td></tr></table></figure><h2 id="Scheduled详解"><a href="#Scheduled详解" class="headerlink" title="@Scheduled详解"></a>@Scheduled详解</h2><p>在上面的入门例子中，使用了@Scheduled(fixedRate = 1000) 注解来定义每过1秒执行的任务，对于<code>@Scheduled</code>的使用可以总结如下几种方式：</p><ul><li>@Scheduled(fixedRate = 1000) ：上一次开始执行时间点之后1秒再执行</li><li>@Scheduled(fixedDelay = 1000) ：上一次执行完毕时间点之后1秒再执行</li><li>@Scheduled(initialDelay=1000, fixedRate=5000) ：第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次</li><li>@Scheduled(cron=”<em>/1 </em> <em> </em> <em> </em>“) ：通过cron表达式定义规则</li></ul><blockquote><p>@Scheduled 注解是单线程的，如果需要多线程，请增加@Async</p></blockquote><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编写Spring Boot应用中会遇到这样的场景，比如：需要定时地发送一些短信、邮件之类的操作，也可能会定时地检查和监控一些标志、参数等。&lt;/p&gt;
&lt;h2 id=&quot;创建定时任务&quot;&gt;&lt;a href=&quot;#创建定时任务&quot; class=&quot;headerlink&quot; title=&quot;创建
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Kotlin  整合全文搜索引擎Elasticsearch</title>
    <link href="http://quanke.name/posts/17411/"/>
    <id>http://quanke.name/posts/17411/</id>
    <published>2018-02-03T14:57:38.000Z</published>
    <updated>2018-03-02T09:41:38.787Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch 在全文搜索里面基本是无敌的，在大数据里面也很有建树，完全可以当nosql（本来也是nosql）使用。</p><p>这篇文章简单介绍Spring Boot使用Kotlin语言连接操作 Elasticsearch。但是不会做很详细的介绍，如果要深入了解Elasticsearch在Java/kotlin中的使用，请参考我之前编写的《Elasticsearch Java API 手册》 <a href="https://gitee.com/quanke/elasticsearch-java/" target="_blank" rel="external">https://gitee.com/quanke/elasticsearch-java/</a> 里面包含使用实例，包含我们使用踩过的坑。</p><blockquote><p>如果完全不了解Elasticsearch请先了解，安装好Elasticsearch服务</p></blockquote><p>有多种方式连接Elasticsearch</p><ul><li>Spring Data Elasticsearch</li><li>elasticsearch Java client</li><li>其他第三方库</li></ul><p>需要注意的是，如果使用Spring Data Elasticsearch，spring boot 1.5++版本的不支持最新版本的elasticsearch。</p><p>下面是spring data elasticsearch 和elasticsearch对应的版本</p><table><thead><tr><th style="text-align:center">spring data elasticsearch</th><th style="text-align:center">elasticsearch</th></tr></thead><tbody><tr><td style="text-align:center">3.0.0.RC2</td><td style="text-align:center">5.5.0</td></tr><tr><td style="text-align:center">3.0.0.M4</td><td style="text-align:center">5.4.0</td></tr><tr><td style="text-align:center">2.0.4.RELEASE</td><td style="text-align:center">2.4.0</td></tr><tr><td style="text-align:center">2.0.0.RELEASE</td><td style="text-align:center">2.2.0</td></tr><tr><td style="text-align:center">1.4.0.M1</td><td style="text-align:center">1.7.3</td></tr><tr><td style="text-align:center">1.3.0.RELEASE</td><td style="text-align:center">1.5.2</td></tr><tr><td style="text-align:center">1.2.0.RELEASE</td><td style="text-align:center">1.4.4</td></tr><tr><td style="text-align:center">1.1.0.RELEASE</td><td style="text-align:center">1.3.2</td></tr><tr><td style="text-align:center">1.0.0.RELEASE</td><td style="text-align:center">1.1.1</td></tr></tbody></table><p>我们使用的<code>Elasticsearch</code>版本是<code>5.5.6</code>，<code>spring boot</code> 使用的版本是<code>1.5.6</code> 而且支持<code>Elasticsearch5.0</code>以上的版本的<code>spring data elasticsearch</code>还不是<code>RELEASE</code>版本，所有我们采用的是<code>elasticsearch Java client</code>的方式,但是现在官方推荐更好的方式可以参考我写的《Elasticsearch Java Rest API 手册》 <a href="https://gitee.com/quanke/elasticsearch-java-rest，但是这篇文章还是使用`elasticsearch" target="_blank" rel="external">https://gitee.com/quanke/elasticsearch-java-rest，但是这篇文章还是使用`elasticsearch</a> Java client`</p><h2 id="构建Spring-Boot-Kotlin-项目"><a href="#构建Spring-Boot-Kotlin-项目" class="headerlink" title="构建Spring Boot Kotlin 项目"></a>构建Spring Boot Kotlin 项目</h2><blockquote><p>如果构建项目有问题的您，可以参考我之前的文章《使用Spring Boot和Kotlin创建RESTfull API》</p></blockquote><p>使用<code>Gradle</code>构建,在<code>build.gradle</code>文件中添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.elasticsearch:elasticsearch:$elasticsearch_version&quot;</div><div class="line">    compile &quot;org.elasticsearch.client:transport:$elasticsearch_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    ext.mybatis_version = &apos;1.1.1&apos;</div><div class="line">    ext.elasticsearch_version = &apos;5.5.1&apos;</div><div class="line">    ext.fastjson_version = &apos;1.2.7&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-8-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.elasticsearch:elasticsearch:$elasticsearch_version&quot;</div><div class="line">    compile &quot;org.elasticsearch.client:transport:$elasticsearch_version&quot;</div><div class="line">    compile &quot;com.alibaba:fastjson:$fastjson_version&quot;</div><div class="line">    compile &quot;org.apache.commons:commons-lang3:3.6&quot;</div><div class="line"></div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>先写测试基类<code>ElasticsearchClient</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON</div><div class="line">import com.alibaba.fastjson.serializer.SerializerFeature</div><div class="line">import org.elasticsearch.action.search.SearchResponse</div><div class="line">import org.elasticsearch.client.transport.TransportClient</div><div class="line">import org.elasticsearch.common.settings.Settings</div><div class="line">import org.elasticsearch.common.transport.InetSocketTransportAddress</div><div class="line">import org.elasticsearch.transport.client.PreBuiltTransportClient</div><div class="line">import org.junit.After</div><div class="line">import org.junit.Before</div><div class="line"></div><div class="line">import java.net.InetAddress</div><div class="line"></div><div class="line">/**</div><div class="line"> * Elasticsearch 5.5.1 的client 和 ElasticsearchTemplate的初始化</div><div class="line"> * 作为一个外部访问者，请求ES的集群，对于集群而言，它是一个外部因素。</div><div class="line"> * Created by http://quanke.name on 2017/11/10.</div><div class="line"> */</div><div class="line">open class ElasticsearchClient &#123;</div><div class="line"></div><div class="line">    protected var client: TransportClient? = null</div><div class="line"></div><div class="line">    @Before</div><div class="line">    @Throws(Exception::class)</div><div class="line">    fun setUp() &#123;</div><div class="line"></div><div class="line">        val esSettings = Settings.builder()</div><div class="line">                .put(&quot;cluster.name&quot;, &quot;utan-es&quot;) //设置ES实例的名称</div><div class="line">                .put(&quot;client.transport.sniff&quot;, true) //自动嗅探整个集群的状态，把集群中其他ES节点的ip添加到本地的客户端列表中</div><div class="line">                .build()</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 这里的连接方式指的是没有安装x-pack插件,如果安装了x-pack则参考 [ElasticsearchXPackClient]</div><div class="line">         * 1. java客户端的方式是以tcp协议在9300端口上进行通信</div><div class="line">         * 2. http客户端的方式是以http协议在9200端口上进行通信</div><div class="line">         */</div><div class="line">        client = PreBuiltTransportClient(esSettings)</div><div class="line">                .addTransportAddress(InetSocketTransportAddress(InetAddress.getByName(&quot;192.168.1.10&quot;), 9300))</div><div class="line"></div><div class="line">        println(&quot;ElasticsearchClient 连接成功&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @After</div><div class="line">    @Throws(Exception::class)</div><div class="line">    fun tearDown() &#123;</div><div class="line">        if (client != null) &#123;</div><div class="line">            client!!.close()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected fun println(searchResponse: SearchResponse) &#123;</div><div class="line">        val searchHits = searchResponse.hits.hits</div><div class="line">        for (searchHit in searchHits) &#123;</div><div class="line">            println(JSON.toJSONString(searchHit.source, SerializerFeature.PrettyFormat))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行单元测试</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">import org.elasticsearch.index.query.QueryBuilders.matchAllQuery</div><div class="line">import org.junit.Test</div><div class="line">import org.junit.runner.RunWith</div><div class="line">import org.springframework.boot.test.context.SpringBootTest</div><div class="line">import org.springframework.test.context.junit4.SpringRunner</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests : ElasticsearchClient() &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `es  test&quot;`() &#123;</div><div class="line"></div><div class="line">        val qb = matchAllQuery()</div><div class="line"></div><div class="line">        val response = client!!.prepareSearch(&quot;twitter&quot;)//可以是多个index</div><div class="line">                .setTypes(&quot;tweet&quot;)//可以是多个类型</div><div class="line">                .setQuery(qb)    // Query 查询条件</div><div class="line">                .get()</div><div class="line"></div><div class="line">        println(response)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们写了一个<code>dayu-spring-boot-starter-es</code> ,有机会开源出来</p><p>更多Spring Boot 和 kotlin相关内容</p><p>欢迎关注<a href="https://www.jianshu.com/c/e6dbcad79e75" target="_blank" rel="external">《Spring Boot 与 kotlin 实战》</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://gitee.com/quanke/elasticsearch-java-rest" target="_blank" rel="external">https://gitee.com/quanke/elasticsearch-java-rest</a></li><li><a href="https://gitee.com/quanke/elasticsearch-java" target="_blank" rel="external">https://gitee.com/quanke/elasticsearch-java</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Elasticsearch 在全文搜索里面基本是无敌的，在大数据里面也很有建树，完全可以当nosql（本来也是nosql）使用。&lt;/p&gt;
&lt;p&gt;这篇文章简单介绍Spring Boot使用Kotlin语言连接操作 Elasticsearch。但是不会做很详细的介绍，如果要深入
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot与Kotlin使用Spring Data Rest创建HAL风格Restful接口</title>
    <link href="http://quanke.name/posts/42854/"/>
    <id>http://quanke.name/posts/42854/</id>
    <published>2018-02-03T14:57:06.000Z</published>
    <updated>2018-03-02T09:41:38.787Z</updated>
    
    <content type="html"><![CDATA[<p>REST web服务已成为在web上应用程序集成的首选方式。在其核心中，REST定义了系统由客户端交互的资源组成。这些资源以超媒体驱动的方式实现。Spring MVC为构建这些服务提供了坚实的基础。但是，对于多域对象系统，即使实施REST web服务的最简单原则也可能相当乏味，并且导致大量样板代码。</p><p>Spring Data REST构建在Spring Data repositories之上，并自动将其导出为REST资源。它利用超媒体来允许客户端查找存储库暴露的功能，并将这些资源自动集成到相关的超媒体功能中。</p><ul><li>根据model，生成HAL风格的restful API</li><li>根据model，维护实体之间的关系</li><li>支持分页</li><li>允许动态地过滤集合资源</li><li>允许通过处理Spring ApplicationEvents处理REST请求。</li><li>目前支持JPA，MongoDB，Neo4j，Solr，Cassandra，Gemfire。</li><li>支持自定义</li></ul><h2 id="将Spring-Data-REST添加到Spring-Boot项目"><a href="#将Spring-Data-REST添加到Spring-Boot项目" class="headerlink" title="将Spring Data REST添加到Spring Boot项目"></a>将Spring Data REST添加到Spring Boot项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-rest:$spring_boot_version&quot;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    ext.mybatis_version = &apos;1.1.1&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-7-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-rest:$spring_boot_version&quot;</div><div class="line">    compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div><div class="line"></div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="创建对象User"><a href="#创建对象User" class="headerlink" title="创建对象User"></a>创建对象User</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import javax.persistence.*</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line"></div><div class="line">@Entity</div><div class="line">data class User(</div><div class="line">        @Id</div><div class="line">        @GeneratedValue(strategy = GenerationType.AUTO)</div><div class="line">        var id: Long = -1,</div><div class="line">        @Column(nullable = false)</div><div class="line">        var username: String = &quot;&quot;,</div><div class="line"></div><div class="line">        var password: String = &quot;&quot;</div><div class="line"></div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure><h2 id="创建UserRepository"><a href="#创建UserRepository" class="headerlink" title="创建UserRepository"></a>创建UserRepository</h2><ul><li>增加<code>@RepositoryRestResource</code>注解 关于<code>@RepositoryRestResource</code>详细的使用介绍，请参考： <a href="https://springcloud.cc/spring-data-rest-zhcn.html" target="_blank" rel="external">https://springcloud.cc/spring-data-rest-zhcn.html</a></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_7.entity.User</div><div class="line">import org.springframework.data.jpa.repository.JpaRepository</div><div class="line">import org.springframework.data.jpa.repository.Query</div><div class="line">import org.springframework.data.repository.query.Param</div><div class="line">import org.springframework.data.rest.core.annotation.RepositoryRestResource</div><div class="line"></div><div class="line">@RepositoryRestResource(path=&quot;user&quot;)</div><div class="line">interface UserRepository : JpaRepository&lt;User, Long&gt; &#123;</div><div class="line"></div><div class="line">    fun findByUsername(username: String): List&lt;User&gt;</div><div class="line"></div><div class="line">    fun findByUsernameAndPassword(username: String, password: String?): User</div><div class="line"></div><div class="line">    @Query(&quot;from User u where u.username=:username&quot;)</div><div class="line">    fun findUser(@Param(&quot;username&quot;) username: String): User</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在<code>application.yml</code>文件中增加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    url: jdbc:mysql://localhost:3306/test</div><div class="line">    username: root</div><div class="line">    password: 123456</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div></pre></td></tr></table></figure></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">//参考：http://blog.csdn.net/soul_code/article/details/54108105</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问 <code>127.0.0.1:8080/user</code></p><p>返回：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;_embedded&quot;: &#123;</div><div class="line">        &quot;users&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;http://gof.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;1111&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/73&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/73&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;java.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;12&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/74&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/74&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;test.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;aa&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/75&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/75&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;es.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;12&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/76&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/76&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;as.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;12&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/77&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/77&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;username&quot;: &quot;vertx.quanke.name&quot;,</div><div class="line">                &quot;password&quot;: &quot;12&quot;,</div><div class="line">                &quot;_links&quot;: &#123;</div><div class="line">                    &quot;self&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/78&quot;</div><div class="line">                    &#125;,</div><div class="line">                    &quot;user&quot;: &#123;</div><div class="line">                        &quot;href&quot;: &quot;http://127.0.0.1:8083/user/78&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;_links&quot;: &#123;</div><div class="line">        &quot;self&quot;: &#123;</div><div class="line">            &quot;href&quot;: &quot;http://127.0.0.1:8083/user&#123;?page,size,sort&#125;&quot;,</div><div class="line">            &quot;templated&quot;: true</div><div class="line">        &#125;,</div><div class="line">        &quot;profile&quot;: &#123;</div><div class="line">            &quot;href&quot;: &quot;http://127.0.0.1:8083/profile/user&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;search&quot;: &#123;</div><div class="line">            &quot;href&quot;: &quot;http://127.0.0.1:8083/user/search&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;page&quot;: &#123;</div><div class="line">        &quot;size&quot;: 20,</div><div class="line">        &quot;totalElements&quot;: 6,</div><div class="line">        &quot;totalPages&quot;: 1,</div><div class="line">        &quot;number&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>访问 <code>127.0.0.1:8083/user/73</code>  </p><blockquote><p>注意： 73 是user id 根据自己的实际情况测试</p></blockquote><p>返回：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;username&quot;: &quot;http://gof.quanke.name&quot;,</div><div class="line">    &quot;password&quot;: &quot;1111&quot;,</div><div class="line">    &quot;_links&quot;: &#123;</div><div class="line">        &quot;self&quot;: &#123;</div><div class="line">            &quot;href&quot;: &quot;http://127.0.0.1:8083/user/73&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;user&quot;: &#123;</div><div class="line">            &quot;href&quot;: &quot;http://127.0.0.1:8083/user/73&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Spring Data REST 能做的事情很多，这篇文章先介绍到这里，先在这里埋个坑，之后会出更加详细的文章说Spring Data REST。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://springcloud.cc/spring-data-rest-zhcn.html" target="_blank" rel="external">https://springcloud.cc/spring-data-rest-zhcn.html</a></li><li><a href="https://www.jianshu.com/p/84f2bbffb885" target="_blank" rel="external">https://www.jianshu.com/p/84f2bbffb885</a></li><li><a href="https://www.cnblogs.com/aguncn/p/6762392.html" target="_blank" rel="external">https://www.cnblogs.com/aguncn/p/6762392.html</a></li><li><a href="http://blog.csdn.net/soul_code/article/details/54108105" target="_blank" rel="external">http://blog.csdn.net/soul_code/article/details/54108105</a></li><li><a href="https://github.com/spring-projects/spring-data-examples/tree/master/rest" target="_blank" rel="external">https://github.com/spring-projects/spring-data-examples/tree/master/rest</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;REST web服务已成为在web上应用程序集成的首选方式。在其核心中，REST定义了系统由客户端交互的资源组成。这些资源以超媒体驱动的方式实现。Spring MVC为构建这些服务提供了坚实的基础。但是，对于多域对象系统，即使实施REST web服务的最简单原则也可能相当乏
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 整合MyBatis</title>
    <link href="http://quanke.name/posts/45445/"/>
    <id>http://quanke.name/posts/45445/</id>
    <published>2018-02-03T14:55:38.000Z</published>
    <updated>2018-03-02T09:41:38.785Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用jpa比较多，再看看mybatis的xml方式写sql觉得不爽，接口定义与映射离散在不同文件中，使得阅读起来并不是特别方便。</p><p>因此使用Spring Boot去整合MyBatis，在注解里写sql</p><p>参考<a href="https://www.jianshu.com/p/051359b920cf" target="_blank" rel="external">《我的第一个Kotlin应用》</a></p><h2 id="创建项目，在build-gradle文件中引入依赖"><a href="#创建项目，在build-gradle文件中引入依赖" class="headerlink" title="创建项目，在build.gradle文件中引入依赖"></a>创建项目，在<code>build.gradle</code>文件中引入依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatis_version&quot;</div><div class="line">compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    ext.mybatis_version = &apos;1.1.1&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-5-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    compile &quot;org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatis_version&quot;</div><div class="line"></div><div class="line">    compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="在application-yml文件中配置mysql的连接"><a href="#在application-yml文件中配置mysql的连接" class="headerlink" title="在application.yml文件中配置mysql的连接"></a>在<code>application.yml</code>文件中配置mysql的连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    url: jdbc:mysql://localhost:3306/test</div><div class="line">    username: root</div><div class="line">    password: 123456</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div></pre></td></tr></table></figure><h2 id="使用MyBatis"><a href="#使用MyBatis" class="headerlink" title="使用MyBatis"></a>使用MyBatis</h2><p>在Mysql中创建User表，包含id(BIGINT)、username(VARCHAR)、age(INT)字段。同时，创建映射对象User</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">data class User(var id: Long? = -1, var username: String = &quot;&quot;, val age: Int? = 0)</div></pre></td></tr></table></figure><p>创建User映射的操作UserMapper，为了后续单元测试验证，实现插入和查询操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import name.quanke.kotlin.chaper11_6_5.entity.User</div><div class="line">import org.apache.ibatis.annotations.Insert</div><div class="line">import org.apache.ibatis.annotations.Mapper</div><div class="line">import org.apache.ibatis.annotations.Param</div><div class="line">import org.apache.ibatis.annotations.Select</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/11.</div><div class="line"> */</div><div class="line"></div><div class="line">@Mapper</div><div class="line">interface UserMapper &#123;</div><div class="line"></div><div class="line">    @Select(&quot;SELECT * FROM USER WHERE USERNAME = #&#123;username&#125;&quot;)</div><div class="line">    fun findByUserName(@Param(&quot;username&quot;) username: String): List&lt;User&gt;</div><div class="line"></div><div class="line">    @Insert(&quot;INSERT INTO USER(USERNAME, PASSWORD) VALUES(#&#123;username&#125;, #&#123;password&#125;)&quot;)</div><div class="line">    fun insert(@Param(&quot;username&quot;) username: String, @Param(&quot;password&quot;) password: String): Int</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="启动-Spring-Boot-类"><a href="#启动-Spring-Boot-类" class="headerlink" title="启动 Spring Boot 类"></a>启动 Spring Boot 类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_5.repository.UserMapper</div><div class="line">import org.apache.commons.logging.LogFactory</div><div class="line">import org.junit.Test</div><div class="line">import org.junit.runner.RunWith</div><div class="line">import org.springframework.boot.test.context.SpringBootTest</div><div class="line">import org.springframework.test.context.junit4.SpringRunner</div><div class="line">import javax.annotation.Resource</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ApplicationTests::class.java)!!</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    lateinit var userMapper: UserMapper</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `MyBatis  test&quot;`() &#123;</div><div class="line"></div><div class="line"></div><div class="line">        log.info(&quot;查询用户名为【quanke.name】的用户：$&#123;userMapper.findByUserName(&quot;quanke.name&quot;)&#125;&quot;)</div><div class="line"></div><div class="line">        userMapper.insert(&quot;quanke&quot;, &quot;123&quot;)</div><div class="line"></div><div class="line">        log.info(&quot;查询用户名为【quanke】的用户：$&#123;userMapper.findByUserName(&quot;quanke&quot;)&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#properties" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/configuration.html#properties</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近使用jpa比较多，再看看mybatis的xml方式写sql觉得不爽，接口定义与映射离散在不同文件中，使得阅读起来并不是特别方便。&lt;/p&gt;
&lt;p&gt;因此使用Spring Boot去整合MyBatis，在注解里写sql&lt;/p&gt;
&lt;p&gt;参考&lt;a href=&quot;https://ww
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 使用MongoDB数据库</title>
    <link href="http://quanke.name/posts/17896/"/>
    <id>http://quanke.name/posts/17896/</id>
    <published>2018-02-03T14:55:05.000Z</published>
    <updated>2018-03-02T09:41:38.783Z</updated>
    
    <content type="html"><![CDATA[<p>我们在产品中用到<code>NoSQL</code>数据库<code>MongoDB</code>。</p><p>下面就来简单介绍一下<code>MongoDB</code>，并且通过一个例子来介绍<code>Spring Boot</code>中对<code>MongoDB</code>访问的配置和使用。</p><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><p>MongoDB是一个基于分布式文件存储的数据库，它是一个介于关系数据库和非关系数据库之间的产品，其主要目标是在键/值存储方式（提供了高性能和高度伸缩性）和传统的RDBMS系统（具有丰富的功能）之间架起一座桥梁，它集两者的优势于一身。</p><p>MongoDB支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型，也因为他的存储格式也使得它所存储的数据在Nodejs程序应用中使用非常流畅。</p><p>既然称为NoSQL数据库，Mongo的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>但是，MongoDB也不是万能的，同MySQL等关系型数据库相比，它们在针对不同的数据类型和事务要求上都存在自己独特的优势。在数据存储的选择中，坚持多样化原则，选择更好更经济的方式，而不是自上而下的统一化。</p><p>较常见的，我们可以直接用MongoDB来存储键值对类型的数据，如：验证码、Session等；由于MongoDB的横向扩展能力，也可以用来存储数据规模会在未来变的非常巨大的数据，如：日志、评论等；由于MongoDB存储数据的弱类型，也可以用来存储一些多变json数据，如：与外系统交互时经常变化的JSON报文。而对于一些对数据有复杂的高事务性要求的操作，如：账户交易等就不适合使用MongoDB来存储。</p><ul><li><a href="https://www.mongodb.org/" target="_blank" rel="external">MongoDB官网</a></li></ul><h2 id="访问MongoDB"><a href="#访问MongoDB" class="headerlink" title="访问MongoDB"></a>访问MongoDB</h2><p>在Spring Boot中，对如此受欢迎的MongoDB，同样提供了自配置功能。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>Spring Boot中可以通过在pom.xml中加入spring-boot-starter-data-mongodb引入对mongodb的访问支持依赖。它的实现依赖spring-data-mongodb。是的，您没有看错，又是spring-data的子项目，之前介绍过spring-data-jpa、spring-data-redis，对于mongodb的访问，spring-data也提供了强大的支持，下面就开始动手试试吧。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-data-mongodb:$spring_boot_version&quot;</div></pre></td></tr></table></figure><p>完整<code>build.gradle</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-4-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">//    compile &quot;org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-mongodb:$spring_boot_version&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="快速开始使用Spring-data-mongodb"><a href="#快速开始使用Spring-data-mongodb" class="headerlink" title="快速开始使用Spring-data-mongodb"></a>快速开始使用Spring-data-mongodb</h3><p>若MongoDB的安装配置采用默认端口，那么在自动配置的情况下，我们不需要做任何参数配置，就能马上连接上本地的MongoDB。下面直接使用spring-data-mongodb来尝试对mongodb的存取操作。（记得mongod启动您的mongodb）</p><p>创建要存储的User实体，包含属性：id、username、age</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.data.annotation.Id</div><div class="line">import org.springframework.data.mongodb.core.mapping.Document</div><div class="line"></div><div class="line">@Document</div><div class="line">data class User(@Id var id: Long? = -1, var username: String = &quot;&quot;, val age: Int? = 0)</div></pre></td></tr></table></figure><p>实现User的数据访问对象：UserRepository<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import name.quanke.kotlin.chaper11_6_4.entity.User</div><div class="line">import org.springframework.data.mongodb.repository.MongoRepository</div><div class="line">import org.springframework.stereotype.Repository</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/11.</div><div class="line"> */</div><div class="line">@Repository</div><div class="line">interface UserRepository : MongoRepository&lt;User, Long&gt; &#123;</div><div class="line">    fun findByUsername(username: String): User</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过上面的例子，我们可以轻而易举的对MongoDB进行访问，但是实战中，应用服务器与MongoDB通常不会部署于同一台设备之上，这样就无法使用自动化的本地配置来进行使用。这个时候，我们也可以方便的配置来完成支持，只需要在application.properties中加入mongodb服务端的相关配置，具体示例如下：</p><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p>在<code>application.yml</code>文件中增加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  data:</div><div class="line">    mongodb:</div><div class="line">      uri: mongodb://192.168.2.53:27017/test</div></pre></td></tr></table></figure></p><p>在尝试此配置时，记得在mongo中对test库创建具备读写权限的用户（用户名为name，密码为pass），不同版本的用户创建语句不同，注意查看文档做好准备工作</p><p>若使用mongodb 2.x，也可以通过如下参数配置，该方式不支持mongodb 3.x。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  data:</div><div class="line">    mongodb:</div><div class="line">      host: mongodb:localhost spring.data.mongodb.port=27017</div></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_4.entity.User</div><div class="line">import name.quanke.kotlin.chaper11_6_4.repository.UserRepository</div><div class="line">import org.apache.commons.logging.LogFactory</div><div class="line">import org.junit.Test</div><div class="line">import org.junit.runner.RunWith</div><div class="line">import org.springframework.beans.factory.annotation.Autowired</div><div class="line">import org.springframework.boot.test.context.SpringBootTest</div><div class="line">import org.springframework.test.context.junit4.SpringRunner</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ApplicationTests::class.java)!!</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    lateinit var userRepository: UserRepository</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `redis string test&quot;`() &#123;</div><div class="line">        userRepository.save(User(1L, &quot;quanke&quot;, 30))</div><div class="line">        userRepository.save(User(2L, &quot;quanke.name&quot;, 40))</div><div class="line"></div><div class="line">        log.info(&quot;数据总条数：$&#123;userRepository.count()&#125;&quot;)</div><div class="line"></div><div class="line">        log.info(&quot;用户名字为 quanke : $&#123;userRepository.findByUsername(&quot;quanke&quot;)&#125;&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/accessing-data-mongodb/" target="_blank" rel="external">https://spring.io/guides/gs/accessing-data-mongodb/</a></li><li><a href="http://blog.didispace.com/springbootmongodb/" target="_blank" rel="external">http://blog.didispace.com/springbootmongodb/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在产品中用到&lt;code&gt;NoSQL&lt;/code&gt;数据库&lt;code&gt;MongoDB&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面就来简单介绍一下&lt;code&gt;MongoDB&lt;/code&gt;，并且通过一个例子来介绍&lt;code&gt;Spring Boot&lt;/code&gt;中对&lt;code&gt;Mongo
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 使用Redis数据库</title>
    <link href="http://quanke.name/posts/59946/"/>
    <id>http://quanke.name/posts/59946/</id>
    <published>2018-02-03T14:54:26.000Z</published>
    <updated>2018-03-02T09:41:38.783Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot中除了对常用的关系型数据库提供了优秀的自动化支持之外，对于很多NoSQL数据库一样提供了自动化配置的支持，包括：Redis, MongoDB, Elasticsearch, Solr和Cassandra。</p><h2 id="使用Redis"><a href="#使用Redis" class="headerlink" title="使用Redis"></a>使用Redis</h2><p>Redis是一个开源的使用<code>ANSI C</code>语言编写、支持网络、可基于内存亦可持久化的日志型、<code>Key-Value</code>数据库。</p><ul><li>Redis官网</li><li>Redis中文社区</li></ul><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>Spring Boot提供的数据访问框架Spring Data Redis基于Jedis。可以通过引入<code>spring-boot-starter-data-redis</code>来配置依赖关系。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-data-redis:$spring_boot_version&quot;</div></pre></td></tr></table></figure><blockquote><p>注意：spring boot 1.4 以后改名叫<code>spring-boot-starter-data-redis 1.4</code>之前使用 <code>spring-boot-starter-redis</code> </p></blockquote><p>用kotlin，需要增加一个插件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-3-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-redis:$spring_boot_version&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>按照惯例在<code>application.yml</code>中加入Redis服务端的相关配置，具体说明如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  redis:</div><div class="line">    database: 2</div><div class="line">    host: 192.168.1.29</div><div class="line">    port: 6379</div></pre></td></tr></table></figure><blockquote><p>其中spring.redis.database的配置通常使用0即可，Redis在配置的时候可以设置数据库数量，默认为16，可以理解为数据库的schema</p></blockquote><p>测试使用上面的配置就可以了</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  redis:</div><div class="line">    database: 2 # Redis数据库索引（默认为0）</div><div class="line">    host: 192.168.1.29</div><div class="line">    port: 6379 # Redis服务器连接端口</div><div class="line">    password: 123456 # Redis服务器连接密码（默认为空）</div><div class="line">    pool:</div><div class="line">      max-active: 8 # 连接池最大连接数（使用负值表示没有限制）</div><div class="line">      max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class="line">      max-idle: 8 # 连接池中的最大空闲连接</div><div class="line">      min-idle: 0 # 连接池中的最小空闲连接</div><div class="line">    timeout: 0 # 连接超时时间（毫秒）</div></pre></td></tr></table></figure><p>创建User实体类</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import java.io.Serializable</div><div class="line"></div><div class="line">data class User(val username: String,  val age: Int?) : Serializable</div></pre></td></tr></table></figure><h2 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h2><p>通过编写测试用例，举例说明如何访问Redis。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_3.entity.User</div><div class="line">import org.apache.commons.logging.LogFactory</div><div class="line">import org.junit.Test</div><div class="line">import org.junit.runner.RunWith</div><div class="line">import org.springframework.boot.test.context.SpringBootTest</div><div class="line">import org.springframework.data.redis.core.RedisTemplate</div><div class="line">import org.springframework.data.redis.core.StringRedisTemplate</div><div class="line">import org.springframework.test.context.junit4.SpringRunner</div><div class="line">import javax.annotation.Resource</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ApplicationTests::class.java)!!</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    lateinit var stringRedisTemplate: StringRedisTemplate</div><div class="line"></div><div class="line">    @Resource</div><div class="line">    lateinit var redisTemplate: RedisTemplate&lt;String, User&gt;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `redis string test&quot;`() &#123;</div><div class="line"></div><div class="line">        // 保存字符串</div><div class="line">        stringRedisTemplate.opsForValue().set(&quot;url&quot;, &quot;http://quanke.name&quot;)</div><div class="line">        log.info(&quot;全科的博客地址: $&#123;stringRedisTemplate.opsForValue().get(&quot;url&quot;)&#125;&quot;)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    @Test</div><div class="line">    fun `redis object test&quot;`() &#123;</div><div class="line"></div><div class="line">        // 保存对象</div><div class="line">        val user = User(&quot;超人&quot;, 20)</div><div class="line">        redisTemplate.opsForValue().set(user.username, user)</div><div class="line"></div><div class="line">        log.info(&quot;超人的年龄：$&#123;redisTemplate.opsForValue().get(&quot;超人&quot;).age&#125;&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然<code>spring-boot-starter-data-redis</code>中提供的数据操作远不止这些，本文仅作为在Spring Boot中使用redis时的配置参考，更多对于redis的操作使用，请参考 <a href="https://docs.spring.io/spring-data/redis/docs/1.6.2.RELEASE/reference/html/" target="_blank" rel="external">Spring Data Redis Reference</a> 。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/messaging-redis/" target="_blank" rel="external">https://spring.io/guides/gs/messaging-redis/</a></li><li><a href="http://blog.didispace.com/springbootredis/" target="_blank" rel="external">http://blog.didispace.com/springbootredis/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot中除了对常用的关系型数据库提供了优秀的自动化支持之外，对于很多NoSQL数据库一样提供了自动化配置的支持，包括：Redis, MongoDB, Elasticsearch, Solr和Cassandra。&lt;/p&gt;
&lt;h2 id=&quot;使用Redis&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin使用Spring-data-jpa简化数据访问层</title>
    <link href="http://quanke.name/posts/49275/"/>
    <id>http://quanke.name/posts/49275/</id>
    <published>2018-02-03T14:53:46.000Z</published>
    <updated>2018-03-02T09:41:38.786Z</updated>
    
    <content type="html"><![CDATA[<p>在《Spring Boot 与 Kotlin 使用JdbcTemplate连接MySQL》 中介绍了一种基本的数据访问方式，结合构建RESTful API和使用Thymeleaf模板引擎渲染Web视图的内容就已经可以完成App服务端和Web站点的开发任务了。</p><p>然而，在实际开发过程中，对数据库的操作无非就“增删改查”。就最为普遍的单表操作而言，除了表和字段不同外，语句都是类似的，开发人员需要写大量类似而枯燥的语句来完成业务逻辑。</p><p>为了解决这些大量枯燥的数据操作语句，我们第一个想到的是使用ORM框架，比如：Hibernate。通过整合Hibernate之后，我们以操作Java实体的方式最终将数据改变映射到数据库表中。</p><p>为了解决抽象各个Java实体基本的“增删改查”操作，我们通常会以泛型的方式封装一个模板Dao来进行抽象简化，但是这样依然不是很方便，我们需要针对每个实体编写一个继承自泛型模板Dao的接口，再编写该接口的实现。虽然一些基础的数据访问已经可以得到很好的复用，但是在代码结构上针对每个实体都会有一堆Dao的接口和实现。</p><p>由于模板Dao的实现，使得这些具体实体的Dao层已经变的非常“薄”，有一些具体实体的Dao实现可能完全就是对模板Dao的简单代理，并且往往这样的实现类可能会出现在很多实体上。Spring-data-jpa的出现正可以让这样一个已经很“薄”的数据访问层变成只是一层接口的编写方式。比如，下面的例子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import name.quanke.kotlin.chaper11_6_2.entity.User</div><div class="line">import org.springframework.data.jpa.repository.JpaRepository</div><div class="line">import org.springframework.data.jpa.repository.Query</div><div class="line">import org.springframework.data.repository.query.Param</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line"></div><div class="line">interface UserRepository : JpaRepository&lt;User, Long&gt; &#123;</div><div class="line"></div><div class="line">    fun findByUsername(username: String): List&lt;User&gt;</div><div class="line">    </div><div class="line">    @Query(&quot;from User u where u.username=:username&quot;)</div><div class="line">    fun findUser(@Param(&quot;username&quot;) username: String): User</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只需要通过编写一个继承自JpaRepository的接口就能完成数据访问，下面以一个具体实例来体验Spring-data-jpa给我们带来的强大功能。</p><p>由于Spring-data-jpa依赖于<a href="http://hibernate.org/orm/" target="_blank" rel="external">Hibernate</a>。如果您对Hibernate有一定了解，下面内容可以毫不费力的看懂并上手使用Spring-data-jpa。如果您还是Hibernate新手，您可以先按如下方式入门，再建议回头学习一下Hibernate以帮助这部分的理解和进一步使用。</p><h2 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h2><p>在<code>build.gradle</code>中添加相关依赖，加入以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version&quot;</div></pre></td></tr></table></figure><blockquote><p>如果使用jpa必须增加<code>kotlin-jpa</code>插件</p></blockquote><p>和kotlin-spring插件一样，kotlin-jpa是一个包含在no-arg之上的插件。 该插件自动指定@Entity，@Embeddable和@MappedSuperclass no-arg注释。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &quot;kotlin-jpa&quot;</div></pre></td></tr></table></figure><p>如果使用的 Gradle plugins DSL</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">plugins &#123;</div><div class="line">  id &quot;org.jetbrains.kotlin.plugin.jpa&quot; version &quot;1.2.20&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">apply plugin: &quot;kotlin-jpa&quot;  //https://stackoverflow.com/questions/32038177/kotlin-with-jpa-default-constructor-hell</div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-2-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile(&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlin_version&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version&quot;</div><div class="line">    compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>application.yml</code>中配置：数据库连接信息（如使用嵌入式数据库则不需要）、自动创建表结构的设置，例如使用mysql的情况如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    url: jdbc:mysql://localhost:3306/test</div><div class="line">    username: root</div><div class="line">    password: 123456</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div></pre></td></tr></table></figure><p><code>spring.jpa.properties.hibernate.hbm2ddl.auto</code>是hibernate的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：</p><ul><li>create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</li><li>create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</li><li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。</li><li>validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。<br>至此已经完成基础配置，如果您有在Spring下整合使用过它的话，相信你已经感受到Spring Boot的便利之处：JPA的传统配置在persistence.xml文件中，但是这里我们不需要。当然，最好在构建项目时候按照之前提过的最佳实践的工程结构来组织，这样以确保各种配置都能被框架扫描到。</li></ul><h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><p>创建一个User实体，包含id（主键）、username（姓名）、password（密码）属性，通过ORM框架其会被映射到数据库表中，由于配置了hibernate.hbm2ddl.auto，在应用启动的时候框架会自动去数据库中创建对应的表。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import javax.persistence.*</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line"></div><div class="line">@Entity</div><div class="line">data class User(</div><div class="line">        @Id</div><div class="line">        @GeneratedValue(strategy = GenerationType.AUTO)</div><div class="line">        var id: Long = -1,</div><div class="line">        @Column(nullable = false)</div><div class="line">        var username: String = &quot;&quot;,</div><div class="line"></div><div class="line">        var password: String = &quot;&quot;</div><div class="line">)</div></pre></td></tr></table></figure><h2 id="创建数据访问接口"><a href="#创建数据访问接口" class="headerlink" title="创建数据访问接口"></a>创建数据访问接口</h2><p>下面针对User实体创建对应的Repository接口实现对该实体的数据访问，如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_2.entity.User</div><div class="line">import org.springframework.data.jpa.repository.JpaRepository</div><div class="line">import org.springframework.data.jpa.repository.Query</div><div class="line">import org.springframework.data.repository.query.Param</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line"></div><div class="line">interface UserRepository : JpaRepository&lt;User, Long&gt; &#123;</div><div class="line"></div><div class="line">    fun findByUsername(username: String): List&lt;User&gt;</div><div class="line"></div><div class="line">    fun findByUsernameAndPassword(username: String, password: String?): User</div><div class="line"></div><div class="line">    @Query(&quot;from User u where u.username=:username&quot;)</div><div class="line">    fun findUser(@Param(&quot;username&quot;) username: String): User</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在Spring-data-jpa中，只需要编写类似上面这样的接口就可实现数据访问。不再像我们以往编写了接口时候还需要自己编写接口实现类，直接减少了我们的文件清单。</p><p>下面对上面的UserRepository做一些解释，该接口继承自JpaRepository，通过查看JpaRepository接口的API文档，可以看到该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。</p><p>在我们实际开发中，JpaRepository接口定义的接口往往还不够或者性能不够优化，我们需要进一步实现更复杂一些的查询或操作。由于本文重点在spring boot中整合spring-data-jpa，在这里先抛砖引玉简单介绍一下spring-data-jpa中让我们兴奋的功能，后续再单独开篇讲一下spring-data-jpa中的常见使用。</p><p>在上例中，我们可以看到下面两个函数：</p><ul><li>fun findByName(name:String ):User</li><li>fun findByNameAndAge(name:String , age:Int ):User</li></ul><p>它们分别实现了按name查询User实体和按name和age查询User实体，可以看到我们这里没有任何类SQL语句就完成了两个条件查询方法。这就是Spring-data-jpa的一大特性：通过解析方法名创建查询。</p><p>除了通过解析方法名来创建查询外，它也提供通过使用@Query 注解来创建查询，您只需要编写JPQL语句，并通过类似“:name”来映射@Param指定的参数，就像例子中的第三个findUser函数一样。</p><p>Spring-data-jpa的能力远不止本文提到的这些，由于本文主要以整合介绍为主，对于Spring-data-jpa的使用只是介绍了常见的使用方式。诸如@Modifying操作、分页排序、原生SQL支持以及与Spring MVC的结合使用等等内容就不在本文中详细展开，这里先挖个坑，后续再补文章填坑，如您对这些感兴趣可以关注我博客或简书，同样欢迎大家留言交流想法。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>在完成了上面的数据访问接口之后，按照惯例就是编写对应的单元测试来验证编写的内容是否正确。这里就不多做介绍，主要通过数据操作和查询来反复验证操作的正确性。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_6_2.entity.User</div><div class="line">import name.quanke.kotlin.chaper11_6_2.repository.UserRepository</div><div class="line">import org.apache.commons.logging.LogFactory</div><div class="line">import org.junit.Test</div><div class="line">import org.junit.runner.RunWith</div><div class="line">import org.springframework.beans.factory.annotation.Autowired</div><div class="line">import org.springframework.boot.test.context.SpringBootTest</div><div class="line">import org.springframework.test.context.junit4.SpringRunner</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ApplicationTests::class.java)!!</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    lateinit var userRepository: UserRepository</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `jpa test&quot;`() &#123;</div><div class="line"></div><div class="line">//        val username = &quot;quanke&quot;</div><div class="line">//        val password = &quot;123456&quot;</div><div class="line"></div><div class="line">        val user = User()</div><div class="line"></div><div class="line">        user.username = &quot;quanke.name&quot;</div><div class="line">        user.password = &quot;12&quot;</div><div class="line">        userRepository.save(user)</div><div class="line"></div><div class="line">        log.info(&quot;总共用户: $&#123;userRepository.count()&#125;&quot;)</div><div class="line"></div><div class="line">        log.info(&quot;名字为quanke的用户: $&#123;userRepository.findByUsername(&quot;quanke.name&quot;)&#125;&quot;)</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/accessing-data-jpa/" target="_blank" rel="external">https://spring.io/guides/gs/accessing-data-jpa/</a></li><li><a href="http://blog.didispace.com/springbootdata2/" target="_blank" rel="external">http://blog.didispace.com/springbootdata2/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在《Spring Boot 与 Kotlin 使用JdbcTemplate连接MySQL》 中介绍了一种基本的数据访问方式，结合构建RESTful API和使用Thymeleaf模板引擎渲染Web视图的内容就已经可以完成App服务端和Web站点的开发任务了。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 使用JdbcTemplate连接MySQL</title>
    <link href="http://quanke.name/posts/56945/"/>
    <id>http://quanke.name/posts/56945/</id>
    <published>2018-02-03T14:52:50.000Z</published>
    <updated>2018-03-02T09:41:38.782Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍了一些Web层的例子，包括构建RESTful API、使用Thymeleaf模板引擎渲染Web视图，但是这些内容还不足以构建一个动态的应用。通常我们做App也好，做Web应用也好，都需要内容，而内容通常存储于各种类型的数据库，服务端在接收到访问请求之后需要访问数据库获取并处理成展现给用户使用的数据形式。</p><p>本文介绍在Spring Boot基础下配置数据源和通过<code>JdbcTemplate</code>编写数据访问的示例。</p><h2 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h2><p>在我们访问数据库的时候，需要先配置一个数据源，下面分别介绍一下几种不同的数据库配置方式。</p><p>首先，为了连接数据库需要引入jdbc支持，在<code>build.gradle</code>中引入如下配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version&quot;</div></pre></td></tr></table></figure><h3 id="连接数据源"><a href="#连接数据源" class="headerlink" title="连接数据源"></a>连接数据源</h3><p>以MySQL数据库为例，先引入MySQL连接的依赖包，在<code>build.gradle</code>中加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div></pre></td></tr></table></figure><p>完整<code>build.gradle</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    ext.springfox_swagger2_version = &apos;2.7.0&apos;</div><div class="line">    ext.mysql_version = &apos;5.1.21&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-6-1-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version&quot;</div><div class="line">    compile &quot;mysql:mysql-connector-java:$mysql_version&quot;</div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>src/main/resources/application.yml</code>中配置数据源信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    url: jdbc:mysql://localhost:3306/test</div><div class="line">    username: root</div><div class="line">    password: 123456</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div></pre></td></tr></table></figure><h3 id="连接JNDI数据源"><a href="#连接JNDI数据源" class="headerlink" title="连接JNDI数据源"></a>连接JNDI数据源</h3><p>当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源。</p><p>如果对JNDI不是很了解的，请参考 <a href="https://baike.baidu.com/item/JNDI/3792442?fr=aladdin" target="_blank" rel="external">https://baike.baidu.com/item/JNDI/3792442?fr=aladdin</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring.datasource.jndi-name=java:jboss/datasources/customers</div></pre></td></tr></table></figure><h2 id="使用JdbcTemplate操作数据库"><a href="#使用JdbcTemplate操作数据库" class="headerlink" title="使用JdbcTemplate操作数据库"></a>使用JdbcTemplate操作数据库</h2><p>Spring的<code>JdbcTemplate</code>是自动配置的，你可以直接使用<code>@Autowired</code>来注入到你自己的bean中来使用。</p><p>举例：我们在创建<code>User</code>表，包含属性id,name、age，下面来编写数据访问对象和单元测试用例。</p><p>定义包含有插入、删除、查询的抽象接口UserService</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">interface UserService &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取用户总量</div><div class="line">     */</div><div class="line">    val allUsers: Int?</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 新增一个用户</div><div class="line">     * @param name</div><div class="line">     * @param age</div><div class="line">     */</div><div class="line">    fun create(name: String, password: String?)</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据name删除一个用户高</div><div class="line">     * @param name</div><div class="line">     */</div><div class="line">    fun deleteByName(name: String)</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除所有用户</div><div class="line">     */</div><div class="line">    fun deleteAllUsers()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过<code>JdbcTemplate</code>实现<code>UserService</code>中定义的数据访问操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired</div><div class="line">import org.springframework.jdbc.core.JdbcTemplate</div><div class="line">import org.springframework.stereotype.Service</div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@Service</div><div class="line">class UserServiceImpl : UserService &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private val jdbcTemplate: JdbcTemplate? = null</div><div class="line"></div><div class="line">    override val allUsers: Int?</div><div class="line">        get() = jdbcTemplate!!.queryForObject(&quot;select count(1) from USER&quot;, Int::class.java)</div><div class="line"></div><div class="line">    override fun create(name: String, password: String?) &#123;</div><div class="line">        jdbcTemplate!!.update(&quot;insert into USER(USERNAME, PASSWORD) values(?, ?)&quot;, name, password)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun deleteByName(name: String) &#123;</div><div class="line">        jdbcTemplate!!.update(&quot;delete from USER where USERNAME = ?&quot;, name)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun deleteAllUsers() &#123;</div><div class="line">        jdbcTemplate!!.update(&quot;delete from USER&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建对UserService的单元测试用例，通过创建、删除和查询来验证数据库操作的正确性。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line">@RunWith(SpringRunner::class)</div><div class="line">@SpringBootTest</div><div class="line">class ApplicationTests &#123;</div><div class="line"></div><div class="line">    val log = LogFactory.getLog(ApplicationTests::class.java)!!</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    lateinit var userService: UserService</div><div class="line"></div><div class="line">    @Test</div><div class="line">    fun `jdbc test&quot;`() &#123;</div><div class="line"></div><div class="line">        val username = &quot;quanke&quot;</div><div class="line">        val password = &quot;123456&quot;</div><div class="line">        // 插入5个用户</div><div class="line">        userService.create(&quot;$username a&quot;, &quot;$password 1&quot;)</div><div class="line">        userService.create(&quot;$username b&quot;, &quot;$password 2&quot;)</div><div class="line">        userService.create(&quot;$username c&quot;, &quot;$password 3&quot;)</div><div class="line">        userService.create(&quot;$username d&quot;, &quot;$password 4&quot;)</div><div class="line">        userService.create(&quot;$username e&quot;, &quot;$password 5&quot;)</div><div class="line"></div><div class="line"></div><div class="line">        log.info(&quot;总共用户 $&#123;userService.allUsers&#125;&quot;)</div><div class="line"></div><div class="line">        // 删除两个用户</div><div class="line">        userService.deleteByName(&quot;$username a&quot;)</div><div class="line">        userService.deleteByName(&quot;$username b&quot;)</div><div class="line"></div><div class="line">        log.info(&quot;总共用户 $&#123;userService.allUsers&#125;&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面介绍的JdbcTemplate只是最基本的几个操作，更多其他数据访问操作的使用请参考：<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html" target="_blank" rel="external">JdbcTemplate API</a></p><p>通过上面这个简单的例子，我们可以看到在Spring Boot下访问数据库的配置依然秉承了框架的初衷：简单。我们只需要在pom.xml中加入数据库依赖，再到application.yml中配置连接信息，不需要像Spring应用中创建JdbcTemplate的Bean，就可以直接在自己的对象中注入使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/relational-data-access/" target="_blank" rel="external">https://spring.io/guides/gs/relational-data-access/</a></li><li><a href="http://blog.didispace.com/springbootdata1/" target="_blank" rel="external">http://blog.didispace.com/springbootdata1/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前介绍了一些Web层的例子，包括构建RESTful API、使用Thymeleaf模板引擎渲染Web视图，但是这些内容还不足以构建一个动态的应用。通常我们做App也好，做Web应用也好，都需要内容，而内容通常存储于各种类型的数据库，服务端在接收到访问请求之后需要访问数据库
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 上传文件</title>
    <link href="http://quanke.name/posts/48021/"/>
    <id>http://quanke.name/posts/48021/</id>
    <published>2018-02-03T14:52:15.000Z</published>
    <updated>2018-03-02T09:41:38.781Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们做一个小型的web站，而且刚好选择的kotlin 和Spring Boot技术栈，那么上传文件的必不可少了，当然，如果你做一个中大型的web站，那建议你使用云存储，能省不少事情。</p><p>这篇文章就介绍怎么使用kotlin 和Spring Boot上传文件</p><h2 id="构建工程"><a href="#构建工程" class="headerlink" title="构建工程"></a>构建工程</h2><blockquote><p>如果对于构建工程还不是很熟悉的可以参考<a href="https://www.jianshu.com/p/051359b920cf" target="_blank" rel="external">《我的第一个Kotlin应用》</a></p></blockquote><p>完整<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-5-6-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建文件上传controller</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_5_6.storage.StorageFileNotFoundException</div><div class="line">import name.quanke.kotlin.chaper11_5_6.storage.StorageService</div><div class="line">import org.springframework.beans.factory.annotation.Autowired</div><div class="line">import org.springframework.core.io.Resource</div><div class="line">import org.springframework.http.HttpHeaders</div><div class="line">import org.springframework.http.ResponseEntity</div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.ui.Model</div><div class="line">import org.springframework.web.bind.annotation.*</div><div class="line">import org.springframework.web.multipart.MultipartFile</div><div class="line">import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder</div><div class="line">import org.springframework.web.servlet.mvc.support.RedirectAttributes</div><div class="line"></div><div class="line">import java.io.IOException</div><div class="line">import java.util.stream.Collectors</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 文件上传控制器</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> */</div><div class="line"></div><div class="line">@Controller</div><div class="line">class FileUploadController @Autowired</div><div class="line">constructor(private val storageService: StorageService) &#123;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/&quot;)</div><div class="line">    @Throws(IOException::class)</div><div class="line">    fun listUploadedFiles(model: Model): String &#123;</div><div class="line"></div><div class="line">        model.addAttribute(&quot;files&quot;, storageService</div><div class="line">                .loadAll()</div><div class="line">                .map &#123; path -&gt;</div><div class="line">                    MvcUriComponentsBuilder</div><div class="line">                            .fromMethodName(FileUploadController::class.java, &quot;serveFile&quot;, path.fileName.toString())</div><div class="line">                            .build().toString()</div><div class="line">                &#125;</div><div class="line">                .collect(Collectors.toList()))</div><div class="line"></div><div class="line">        return &quot;uploadForm&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/files/&#123;filename:.+&#125;&quot;)</div><div class="line">    @ResponseBody</div><div class="line">    fun serveFile(@PathVariable filename: String): ResponseEntity&lt;Resource&gt; &#123;</div><div class="line"></div><div class="line">        val file = storageService.loadAsResource(filename)</div><div class="line">        return ResponseEntity</div><div class="line">                .ok()</div><div class="line">                .header(HttpHeaders.CONTENT_DISPOSITION, &quot;attachment; filename=\&quot;&quot; + file.filename + &quot;\&quot;&quot;)</div><div class="line">                .body(file)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @PostMapping(&quot;/&quot;)</div><div class="line">    fun handleFileUpload(@RequestParam(&quot;file&quot;) file: MultipartFile,</div><div class="line">                         redirectAttributes: RedirectAttributes): String &#123;</div><div class="line"></div><div class="line">        storageService.store(file)</div><div class="line">        redirectAttributes.addFlashAttribute(&quot;message&quot;,</div><div class="line">                &quot;You successfully uploaded &quot; + file.originalFilename + &quot;!&quot;)</div><div class="line"></div><div class="line">        return &quot;redirect:/&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ExceptionHandler(StorageFileNotFoundException::class)</div><div class="line">    fun handleStorageFileNotFound(exc: StorageFileNotFoundException): ResponseEntity&lt;*&gt; &#123;</div><div class="line">        return ResponseEntity.notFound().build&lt;Any&gt;()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上传文件服务的接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.core.io.Resource</div><div class="line">import org.springframework.web.multipart.MultipartFile</div><div class="line"></div><div class="line">import java.nio.file.Path</div><div class="line">import java.util.stream.Stream</div><div class="line"></div><div class="line">interface StorageService &#123;</div><div class="line"></div><div class="line">    fun init()</div><div class="line"></div><div class="line">    fun store(file: MultipartFile)</div><div class="line"></div><div class="line">    fun loadAll(): Stream&lt;Path&gt;</div><div class="line"></div><div class="line">    fun load(filename: String): Path</div><div class="line"></div><div class="line">    fun loadAsResource(filename: String): Resource</div><div class="line"></div><div class="line">    fun deleteAll()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上传文件服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.beans.factory.annotation.Autowired</div><div class="line">import org.springframework.core.io.Resource</div><div class="line">import org.springframework.core.io.UrlResource</div><div class="line">import org.springframework.stereotype.Service</div><div class="line">import org.springframework.util.FileSystemUtils</div><div class="line">import org.springframework.util.StringUtils</div><div class="line">import org.springframework.web.multipart.MultipartFile</div><div class="line">import java.io.IOException</div><div class="line">import java.net.MalformedURLException</div><div class="line">import java.nio.file.Files</div><div class="line">import java.nio.file.Path</div><div class="line">import java.nio.file.Paths</div><div class="line">import java.nio.file.StandardCopyOption</div><div class="line">import java.util.stream.Stream</div><div class="line"></div><div class="line">@Service</div><div class="line">class FileSystemStorageService @Autowired</div><div class="line">constructor(properties: StorageProperties) : StorageService &#123;</div><div class="line"></div><div class="line">    private val rootLocation: Path</div><div class="line"></div><div class="line">    init &#123;</div><div class="line">        this.rootLocation = Paths.get(properties.location)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun store(file: MultipartFile) &#123;</div><div class="line">        val filename = StringUtils.cleanPath(file.originalFilename)</div><div class="line">        try &#123;</div><div class="line">            if (file.isEmpty) &#123;</div><div class="line">                throw StorageException(&quot;Failed to store empty file &quot; + filename)</div><div class="line">            &#125;</div><div class="line">            if (filename.contains(&quot;..&quot;)) &#123;</div><div class="line">                // This is a security check</div><div class="line">                throw StorageException(</div><div class="line">                        &quot;Cannot store file with relative path outside current directory &quot; + filename)</div><div class="line">            &#125;</div><div class="line">            Files.copy(file.inputStream, this.rootLocation.resolve(filename),</div><div class="line">                    StandardCopyOption.REPLACE_EXISTING)</div><div class="line">        &#125; catch (e: IOException) &#123;</div><div class="line">            throw StorageException(&quot;Failed to store file &quot; + filename, e)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun loadAll(): Stream&lt;Path&gt; &#123;</div><div class="line">        try &#123;</div><div class="line">            return Files.walk(this.rootLocation, 1)</div><div class="line">                    .filter &#123; path -&gt; path != this.rootLocation &#125;</div><div class="line">                    .map &#123; path -&gt; this.rootLocation.relativize(path) &#125;</div><div class="line">        &#125; catch (e: IOException) &#123;</div><div class="line">            throw StorageException(&quot;Failed to read stored files&quot;, e)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun load(filename: String): Path &#123;</div><div class="line">        return rootLocation.resolve(filename)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun loadAsResource(filename: String): Resource &#123;</div><div class="line">        try &#123;</div><div class="line">            val file = load(filename)</div><div class="line">            val resource = UrlResource(file.toUri())</div><div class="line">            return if (resource.exists() || resource.isReadable) &#123;</div><div class="line">                resource</div><div class="line">            &#125; else &#123;</div><div class="line">                throw StorageFileNotFoundException(</div><div class="line">                        &quot;Could not read file: &quot; + filename)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; catch (e: MalformedURLException) &#123;</div><div class="line">            throw StorageFileNotFoundException(&quot;Could not read file: &quot; + filename, e)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun deleteAll() &#123;</div><div class="line">        FileSystemUtils.deleteRecursively(rootLocation.toFile())</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun init() &#123;</div><div class="line">        try &#123;</div><div class="line">            Files.createDirectories(rootLocation)</div><div class="line">        &#125; catch (e: IOException) &#123;</div><div class="line">            throw StorageException(&quot;Could not initialize storage&quot;, e)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自定义异常</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">open class StorageException : RuntimeException &#123;</div><div class="line"></div><div class="line">    constructor(message: String) : super(message)</div><div class="line"></div><div class="line">    constructor(message: String, cause: Throwable) : super(message, cause)</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class StorageFileNotFoundException : StorageException &#123;</div><div class="line"></div><div class="line">    constructor(message: String) : super(message)</div><div class="line"></div><div class="line">    constructor(message: String, cause: Throwable) : super(message, cause)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置文件上传目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.context.properties.ConfigurationProperties</div><div class="line"></div><div class="line">@ConfigurationProperties(&quot;storage&quot;)</div><div class="line">class StorageProperties &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Folder location for storing files</div><div class="line">     */</div><div class="line">    var location = &quot;upload-dir&quot;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动Spring Boot</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">@EnableConfigurationProperties(StorageProperties::class)</div><div class="line">class Application &#123;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    internal fun init(storageService: StorageService) = CommandLineRunner &#123;</div><div class="line">        storageService.deleteAll()</div><div class="line">        storageService.init()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line"></div><div class="line">        @Throws(Exception::class)</div><div class="line">        @JvmStatic</div><div class="line">        fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">            SpringApplication.run(Application::class.java, *args)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个简单的 html模板 <code>src/main/resources/templates/uploadForm.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div th:if=&quot;$&#123;message&#125;&quot;&gt;</div><div class="line">    &lt;h2 th:text=&quot;$&#123;message&#125;&quot;/&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;</div><div class="line">    &lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot; action=&quot;/&quot;&gt;</div><div class="line">        &lt;table&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;File to upload:&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;Upload&quot;/&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">        &lt;li th:each=&quot;file : $&#123;files&#125;&quot;&gt;</div><div class="line">            &lt;a th:href=&quot;$&#123;file&#125;&quot; th:text=&quot;$&#123;file&#125;&quot;/&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>配置文件<code>application.yml</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">spring:</div><div class="line">  http:</div><div class="line">    multipart:</div><div class="line">      max-file-size: 128KB</div><div class="line">      max-request-size: 128KB</div></pre></td></tr></table></figure><p>更多Spring Boot 和 kotlin相关内容，欢迎关注<a href="https://www.jianshu.com/c/e6dbcad79e75" target="_blank" rel="external">《Spring Boot 与 kotlin 实战》</a></p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p><a href="https://github.com/quanke/spring-boot-with-kotlin-in-action/" target="_blank" rel="external">https://github.com/quanke/spring-boot-with-kotlin-in-action/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul><li><a href="https://spring.io/guides/gs/uploading-files/" target="_blank" rel="external">https://spring.io/guides/gs/uploading-files/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果我们做一个小型的web站，而且刚好选择的kotlin 和Spring Boot技术栈，那么上传文件的必不可少了，当然，如果你做一个中大型的web站，那建议你使用云存储，能省不少事情。&lt;/p&gt;
&lt;p&gt;这篇文章就介绍怎么使用kotlin 和Spring Boot上传文件&lt;/
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 验证web表单信息</title>
    <link href="http://quanke.name/posts/46111/"/>
    <id>http://quanke.name/posts/46111/</id>
    <published>2018-02-03T14:51:29.000Z</published>
    <updated>2018-03-02T09:41:38.785Z</updated>
    
    <content type="html"><![CDATA[<p>在做web开发的时候，我们需要验证表单，确认用户提交的信息是安全的，比如用户名不能超过多少位，密码不能少于多少位等等。</p><p>那么如何在Spring Boot 与 Kotlin中验证表单信息？</p><p>在springmvc工程中，需要检查表单信息，表单信息验证主要通过注解的形式。</p><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>下面我们在之前《Spring Boot 与 Kotlin使用Freemarker模板引擎渲染web视图》项目的基础上，增加表单验证。</p><p><code>build.gradle</code> 文件增加依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.hibernate:hibernate-validator&quot;</div><div class="line">compile &quot;org.apache.tomcat.embed:tomcat-embed-el&quot;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-5-5-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.hibernate:hibernate-validator&quot;</div><div class="line">    compile &quot;org.apache.tomcat.embed:tomcat-embed-el&quot;</div><div class="line"></div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建UserForm类</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import javax.validation.constraints.Min</div><div class="line">import javax.validation.constraints.NotNull</div><div class="line">import javax.validation.constraints.Size</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> * https://stackoverflow.com/questions/36515094/kotlin-and-valid-spring-annotation</div><div class="line"> * https://stonesoupprogramming.com/2017/06/21/spring-bean-validation-example-jsr-303-in-kotlin/</div><div class="line"> */</div><div class="line">data class UserForm(@get:NotNull(message = &quot;&#123;name.required&#125;&quot;) @get:Size(min = 2, max = 5,message = &quot;&#123;name.size&#125;&quot;) var name: String? = &quot;&quot;, @get:Min(18) var age: Int? = 0)</div></pre></td></tr></table></figure><blockquote><p>如果是Spring boot 可以不增加 @get注解，如果使用kotlin 语言实现必须加@get</p></blockquote><p>这个实体类，在2个属性:name,age.它们各自有验证的注解：</p><ul><li>@Size(min=2, max=5) name的长度为2-30个字符</li><li>@NotNull 不为空</li><li>@Min(18)age不能小于18</li></ul><p>创建<code>WebController</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_5_5.entity.UserForm</div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.validation.Errors</div><div class="line">import org.springframework.web.bind.annotation.GetMapping</div><div class="line">import org.springframework.web.bind.annotation.PostMapping</div><div class="line">import org.springframework.web.servlet.config.annotation.ViewControllerRegistry</div><div class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter</div><div class="line">import javax.validation.Valid</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> */</div><div class="line"></div><div class="line">@Controller</div><div class="line">class WebController : WebMvcConfigurerAdapter() &#123;</div><div class="line">    override fun addViewControllers(registry: ViewControllerRegistry?) &#123;</div><div class="line">        registry!!.addViewController(&quot;/results&quot;).setViewName(&quot;results&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @GetMapping(&quot;/&quot;)</div><div class="line">    fun index(userForm: UserForm): String &#123;</div><div class="line">        return &quot;index&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @PostMapping(&quot;/&quot;)</div><div class="line">    fun checkPersonInfo(@Valid userForm: UserForm, errors: Errors): String &#123;</div><div class="line"></div><div class="line">        val result: String = when &#123;</div><div class="line">        //Test for errors</div><div class="line">            errors.hasErrors() -&gt; &quot;index&quot;</div><div class="line">            else -&gt; &#123;</div><div class="line">                //Otherwise proceed to the next page</div><div class="line">                &quot;redirect:/results&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建form表单<code>src/main/resources/templates/index.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;title&gt;quanke.name&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;Form&lt;/h1&gt;</div><div class="line">&lt;form action=&quot;#&quot; th:action=&quot;@&#123;/&#125;&quot; th:object=&quot;$&#123;userForm&#125;&quot; method=&quot;post&quot;&gt;</div><div class="line">    &lt;table&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;Name:&lt;/td&gt;</div><div class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;name&#125;&quot; /&gt;&lt;/td&gt;</div><div class="line">            &lt;td th:if=&quot;$&#123;#fields.hasErrors(&apos;name&apos;)&#125;&quot; th:errors=&quot;*&#123;name&#125;&quot;&gt;Name Error&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;Age:&lt;/td&gt;</div><div class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;age&#125;&quot; /&gt;&lt;/td&gt;</div><div class="line">            &lt;td th:if=&quot;$&#123;#fields.hasErrors(&apos;age&apos;)&#125;&quot; th:errors=&quot;*&#123;age&#125;&quot;&gt;Age Error&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;&lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>成功页面<code>src/main/resources/templates/results.html</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</div><div class="line">    &lt;title&gt;quanke&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;quanke.name&lt;/h1&gt;</div><div class="line">Congratulations! You are old enough to sign up for this site</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>在<code>src/main/resources/</code>目录下增加<code>ValidationMessages.properties</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># \u8FD9\u91CC\u8981\u6CE8\u610F\u7F16\u7801\u95EE\u9898</div><div class="line">name.required=\u540D\u5B57\u4E0D\u80FD\u4E3A\u7A7A</div><div class="line">name.size=\u540D\u5B57\u957F\u5EA6\u8FD4\u56DE\u53EA\u80FD\u662F2-5</div></pre></td></tr></table></figure><p>Spring Boot 启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://spring.io/guides/gs/validating-form-input/" target="_blank" rel="external">https://spring.io/guides/gs/validating-form-input/</a></li><li><a href="https://stonesoupprogramming.com/2017/06/21/spring-bean-validation-example-jsr-303-in-kotlin/" target="_blank" rel="external">https://stonesoupprogramming.com/2017/06/21/spring-bean-validation-example-jsr-303-in-kotlin/</a></li><li><a href="https://stackoverflow.com/questions/36515094/kotlin-and-valid-spri" target="_blank" rel="external">https://stackoverflow.com/questions/36515094/kotlin-and-valid-spri</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做web开发的时候，我们需要验证表单，确认用户提交的信息是安全的，比如用户名不能超过多少位，密码不能少于多少位等等。&lt;/p&gt;
&lt;p&gt;那么如何在Spring Boot 与 Kotlin中验证表单信息？&lt;/p&gt;
&lt;p&gt;在springmvc工程中，需要检查表单信息，表单信息验证
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 处理Web表单提交</title>
    <link href="http://quanke.name/posts/55956/"/>
    <id>http://quanke.name/posts/55956/</id>
    <published>2018-02-03T14:50:38.000Z</published>
    <updated>2018-03-02T09:41:38.784Z</updated>
    
    <content type="html"><![CDATA[<p>我们在做web开发的时候，肯定逃不过表单提交，这篇文章通过Spring Boot使用Kotlin 语言 创建和提交一个表单。</p><p>下面我们在之前<a href="https://www.jianshu.com/p/884632f71bc7" target="_blank" rel="external">《Spring Boot 与 Kotlin使用Freemarker模板引擎渲染web视图》</a>项目的基础上，增加处理表单提交。</p><p><code>build.gradle</code> 文件没有变化，这里贴一下完整的<code>build.gradle</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-5-4-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version&quot;</div><div class="line">//    compile &quot;com.fasterxml.jackson.module:jackson-module-kotlin:$kotlin_version&quot;</div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建实体类<code>Hello</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/12.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line">data class Hello(var id: Long? = 0, var content: String? = &quot;&quot;)</div></pre></td></tr></table></figure><p>创建Controller</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_5_4.entity.Hello</div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.ui.ModelMap</div><div class="line">import org.springframework.web.bind.annotation.ModelAttribute</div><div class="line">import org.springframework.web.bind.annotation.PostMapping</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">class HelloController &#123;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/&quot;)</div><div class="line">    fun index(map: ModelMap): String &#123;</div><div class="line">//        / 加入一个属性，用来在模板中读取</div><div class="line">        map.addAttribute(&quot;host&quot;, &quot;http://quanke.name&quot;)</div><div class="line">        map.addAttribute(&quot;hello&quot;,Hello())</div><div class="line">        // return模板文件的名称，对应src/main/resources/templates/index.html</div><div class="line">        return &quot;index&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @PostMapping(&quot;/hello&quot;)</div><div class="line">    fun helloPostSubmit(@ModelAttribute hello: Hello): String &#123;</div><div class="line"></div><div class="line">        return &quot;result&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="页面展示层"><a href="#页面展示层" class="headerlink" title="页面展示层"></a>页面展示层</h2><ul><li><code>src/main/resources/templates/index.html</code></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;title&gt;quanke.name&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 th:text=&quot;$&#123;host&#125;&quot;&gt;Hello World&lt;/h1&gt;</div><div class="line">&lt;h1&gt;Form&lt;/h1&gt;</div><div class="line">&lt;form action=&quot;#&quot; th:action=&quot;@&#123;/hello&#125;&quot; th:object=&quot;$&#123;hello&#125;&quot; method=&quot;post&quot;&gt;</div><div class="line">    &lt;p&gt;Id: &lt;input type=&quot;text&quot; th:field=&quot;*&#123;id&#125;&quot;/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;Message: &lt;input type=&quot;text&quot; th:field=&quot;*&#123;content&#125;&quot;/&gt;&lt;/p&gt;</div><div class="line">    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt; &lt;input type=&quot;reset&quot; value=&quot;Reset&quot;/&gt;&lt;/p&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><ul><li>src/main/resources/templates/result.html</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;Result&lt;/h1&gt;</div><div class="line">&lt;p th:text=&quot;&apos;id: &apos; + $&#123;hello.id&#125;&quot;/&gt;</div><div class="line">&lt;p th:text=&quot;&apos;content: &apos; + $&#123;hello.content&#125;&quot;/&gt;</div><div class="line">&lt;a href=&quot;/&quot;&gt;Submit another message&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>Spring Boot 启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动工程，访问ttp://localhost:8080/:</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/handling-form-submission/" target="_blank" rel="external">https://spring.io/guides/gs/handling-form-submission/</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在做web开发的时候，肯定逃不过表单提交，这篇文章通过Spring Boot使用Kotlin 语言 创建和提交一个表单。&lt;/p&gt;
&lt;p&gt;下面我们在之前&lt;a href=&quot;https://www.jianshu.com/p/884632f71bc7&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin Web应用的统一异常处理</title>
    <link href="http://quanke.name/posts/44428/"/>
    <id>http://quanke.name/posts/44428/</id>
    <published>2018-02-03T14:49:38.000Z</published>
    <updated>2018-03-02T09:41:38.781Z</updated>
    
    <content type="html"><![CDATA[<p>做Web应用，请求处理过程中发生错误是非常常见的。<code>Spring Boot</code>提供了一个默认的映射：<code>/error</code>，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p><p>选择一个之前实现过的Web应用（chapter11-5-1 ）为基础，启动该应用，访问一个不存在的URL，或是修改处理内容，直接抛出异常，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">@RequestMapping(&quot;/hello&quot;)</div><div class="line">@Throws(Exception::class)</div><div class="line">fun hello() &#123;</div><div class="line">    throw  Exception(&quot;发生错误&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>注意版本实例修改默认端口，现在为8083,如果想修改为默认的，请修改application.yml文件</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8080</div></pre></td></tr></table></figure><p>此时，可以看到类似下面的报错页面，该页面就是<code>Spring Boot</code>提供的默认<code>error</code>映射页面。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Whitelabel Error Page</div><div class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</div><div class="line"></div><div class="line">Fri Jan 19 10:01:32 CST 2018</div><div class="line">There was an unexpected error (type=Internal Server Error, status=500).</div><div class="line">????</div></pre></td></tr></table></figure><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>虽然，Spring Boot中实现了默认的<code>error</code>映射，但是在实际应用中，上面你的错误页面对用户来说并不够友好，我们通常需要去实现我们自己的异常提示。</p><p>下面我们以之前的Web应用例子为基础（chapter11-5-1 ），进行统一异常处理的改造。</p><p>创建全局异常处理类：通过使用<code>@ControllerAdvice</code>定义统一的异常处理类，而不是在每个<code>Controller</code>中逐个定义。<code>@ExceptionHandler</code>用来定义函数针对的异常类型，最后将<code>Exception</code>对象和请求URL映射到<code>error.html</code>中</p><blockquote><p>@ControllerAdvice 注解的类需要增加 @RestController //springboot1.5.7版本,如果不加 这个会报错 jsonErrorHandler</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.ControllerAdvice</div><div class="line">import org.springframework.web.bind.annotation.ExceptionHandler</div><div class="line">import org.springframework.web.bind.annotation.RestController</div><div class="line">import org.springframework.web.servlet.ModelAndView</div><div class="line">import javax.servlet.http.HttpServletRequest</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@ControllerAdvice</div><div class="line">@RestController //springboot1.5.7版本,如果不加 这个会报错 jsonErrorHandler</div><div class="line">class GlobalExceptionHandler &#123;</div><div class="line"></div><div class="line">    @ExceptionHandler(value = Exception::class)</div><div class="line">    @Throws(Exception::class)</div><div class="line">    fun defaultErrorHandler(req: HttpServletRequest, e: Exception): ModelAndView &#123;</div><div class="line">        val mav = ModelAndView()</div><div class="line">        mav.addObject(&quot;exception&quot;, e)</div><div class="line">        mav.addObject(&quot;url&quot;, req.requestURL)</div><div class="line">        mav.viewName = &quot;error&quot;</div><div class="line">        return mav</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实现<code>error.html</code>页面展示：在<code>templates</code>目录下创建<code>error.html</code>，将请求的URL和<code>Exception</code>对象的<code>message</code>输出。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">    &lt;title&gt;统一异常处理&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;http://quanke.name  Error Handler&lt;/h1&gt;</div><div class="line">&lt;div th:text=&quot;$&#123;url&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div th:text=&quot;$&#123;exception.message&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>启动该应用，访问：<a href="http://localhost:8083/hello，可以看到如下错误提示页面。" target="_blank" rel="external">http://localhost:8083/hello，可以看到如下错误提示页面。</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://quanke.name Error Handler</div><div class="line">http://127.0.0.1:8083/hello</div><div class="line">发生错误</div></pre></td></tr></table></figure><p>通过实现上述内容之后，我们只需要在<code>Controller</code>中抛出Exception，当然我们可能会有多种不同的Exception。然后在<code>@ControllerAdvice</code>类中，根据抛出的具体Exception类型匹配<code>@ExceptionHandler</code>中配置的异常类型来匹配错误映射和处理。</p><h2 id="返回JSON格式"><a href="#返回JSON格式" class="headerlink" title="返回JSON格式"></a>返回JSON格式</h2><p>在上述例子中，通过<code>@ControllerAdvice</code>统一定义不同Exception映射到不同错误处理页面。而当我们要实现RESTful API时，返回的错误是JSON格式的数据，而不是HTML页面，这时候我们也能轻松支持。</p><p>本质上，只需在<code>@ExceptionHandler</code>之后加入<code>@ResponseBody</code>，就能让处理函数return的内容转换为JSON格式。</p><p>下面以一个具体示例来实现返回JSON格式的异常处理。</p><p>创建统一的JSON返回对象，code：消息类型，message：消息内容，url：请求的url，data：请求返回的数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">data class ErrorInfo&lt;T&gt;(var code: Int? = null,</div><div class="line">                            var message: String? = &quot;&quot;,</div><div class="line">                            var url: String? = &quot;&quot;,</div><div class="line">                            var data: T? = null</div><div class="line">)</div></pre></td></tr></table></figure><p>创建一个自定义异常，用来实验捕获该异常，并返回json</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/11.</div><div class="line"> */</div><div class="line"></div><div class="line">class QkException(message: String) : Exception(message)</div></pre></td></tr></table></figure><p>Controller中增加json映射，抛出QkException异常</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_5_3.exception.QkException</div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">class UserController &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @RequestMapping(&quot;/json&quot;)</div><div class="line">    @Throws(QkException::class)</div><div class="line">    fun json(): String &#123;</div><div class="line">        throw QkException(&quot;发生错误 json&quot;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为QkException异常创建对应的处理</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import name.quanke.kotlin.chaper11_5_3.entity.ErrorInfo</div><div class="line">import org.springframework.web.bind.annotation.ControllerAdvice</div><div class="line">import org.springframework.web.bind.annotation.ExceptionHandler</div><div class="line">import org.springframework.web.bind.annotation.RestController</div><div class="line">import javax.servlet.http.HttpServletRequest</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@ControllerAdvice</div><div class="line">@RestController //springboot1.5.7版本,如果不加 这个会报错 jsonErrorHandler</div><div class="line">class GlobalExceptionHandler &#123;</div><div class="line">        </div><div class="line">    @ExceptionHandler(value = QkException::class)</div><div class="line">    @Throws(QkException::class)</div><div class="line">    fun jsonErrorHandler(req: HttpServletRequest, e: QkException): ErrorInfo&lt;String&gt; &#123;</div><div class="line">        val r = ErrorInfo&lt;String&gt;()</div><div class="line">        r.message = e.message</div><div class="line">        r.code = 1</div><div class="line">        r.data = &quot;Some Data&quot;</div><div class="line">        r.url = req.requestURL.toString()</div><div class="line">        return r</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>启动应用，访问：<a href="http://localhost:8083/json，可以得到如下返回内容：" target="_blank" rel="external">http://localhost:8083/json，可以得到如下返回内容：</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;code&quot;: 1,</div><div class="line">    &quot;message&quot;: &quot;发生错误 json&quot;,</div><div class="line">    &quot;url&quot;: &quot;http://127.0.0.1:8083/json&quot;,</div><div class="line">    &quot;data&quot;: &quot;Some Data&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>至此，已完成在Spring Boot中创建统一的异常处理，实际实现还是依靠Spring MVC的注解，更多更深入的使用可参考[Spring MVC]的文档。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://spring.io/guides/gs/serving-web-content/" target="_blank" rel="external">https://spring.io/guides/gs/serving-web-content/</a></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/quanke/spring-boot-with-kotlin-in-action/chapter11-5-3" target="_blank" rel="external">https://github.com/quanke/spring-boot-with-kotlin-in-action/chapter11-5-3</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做Web应用，请求处理过程中发生错误是非常常见的。&lt;code&gt;Spring Boot&lt;/code&gt;提供了一个默认的映射：&lt;code&gt;/error&lt;/code&gt;，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。&lt;/p&gt;
&lt;p&gt;选择一个
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 Kotlin 使用Freemarker模板引擎渲染web视图</title>
    <link href="http://quanke.name/posts/39947/"/>
    <id>http://quanke.name/posts/39947/</id>
    <published>2018-02-02T16:01:59.000Z</published>
    <updated>2018-03-02T09:41:38.782Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://www.jianshu.com/p/884632f71bc7" target="_blank" rel="external">《Spring Boot 与 Kotlin 使用Thymeleaf模板引擎渲染web视图》</a> 一文中，我们使用Thymeleaf模板引擎渲染web视图，体验了kotlin 与spring boot结合是相当好的，这篇文章中继续介绍web视图，但是是使用Freemarker模板引擎渲染web视图。</p></blockquote><p>Web相关的介绍这里就不多阐述，还没了解的请移步《Spring Boot 与 Kotlin 使用Thymeleaf模板引擎渲染web视图》</p><h2 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h2><p><code>FreeMarker</code>是一款模板引擎： 即一种基于模板和要改变的数据，    并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。    它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p><code>FreeMarker</code>是免费的，基于Apache许可证2.0版本发布。其模板编写为<code>FreeMarker Template Language（FTL）</code>，属于简单、专用的语言。需要准备数据在真实编程语言中来显示，比如数据库查询和业务运算，    之后模板显示已经准备好的数据。在模板中，主要用于如何展现数据，    而在模板之外注意于要展示什么数据 。</p><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul><li>${…}：FreeMarker将会输出真实的值来替换大括号内的表达式，这样的表达式被称为interpolation（插值）。</li><li>注释：注释和HTML的注释也很相似，但是它们使用&lt;#– and –&gt;来标识。不像HTML注释那样，FTL注释不会出现在输出中（不出现在访问者的页面中），因为FreeMarker会跳过它们。</li><li>FTL标签（FreeMarker模板的语言标签）：FTL标签和HTML标签有一些相似之处，但是它们是FreeMarker的指令，是不会在输出中打印的。这些标签的名字以#开头。（用户自定义的FTL标签则需要使用@来代替#）</li></ul><h3 id="模版实例"><a href="#模版实例" class="headerlink" title="模版实例"></a>模版实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;Welcome!&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Welcome $&#123;username&#125;!&lt;/h1&gt;</div><div class="line">        &lt;p&gt;Our latest product:</div><div class="line">        &lt;a href=&quot;$&#123;latestProduct.url&#125;&quot;&gt;$&#123;latestProduct.name&#125;&lt;/a&gt;!</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>在Spring Boot中使用<code>FreeMarker</code>相关的，只需要引入下面依赖，并在默认的模板路径<code>src/main/resources/templates</code>下编写模板文件即可完成。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-freemarker:$spring_boot_version&quot;</div></pre></td></tr></table></figure><p>完整的<code>build.gradle</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line">    ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">        classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;)</div><div class="line"></div><div class="line">//        Kotlin整合SpringBoot的默认无参构造函数，默认把所有的类设置open类插件</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;)</div><div class="line">        classpath(&quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = &apos;chapter11-5-2-service&apos;</div><div class="line">    version = &apos;0.1.0&apos;</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-web:$spring_boot_version&quot;</div><div class="line">    compile &quot;org.springframework.boot:spring-boot-starter-freemarker:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.springframework.boot:spring-boot-starter-test:$spring_boot_version&quot;</div><div class="line">    testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div><div class="line">compileTestKotlin &#123;</div><div class="line">    kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="举个例子：通过FreeMarker渲染一个页面。"><a href="#举个例子：通过FreeMarker渲染一个页面。" class="headerlink" title="举个例子：通过FreeMarker渲染一个页面。"></a>举个例子：通过FreeMarker渲染一个页面。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.ui.Model</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">class HelloController &#123;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/&quot;)</div><div class="line">    fun index(model: Model): String &#123;</div><div class="line">//        / 加入一个属性，用来在模板中读取</div><div class="line">        model.addAttribute(&quot;host&quot;, &quot;http://quanke.name&quot;)</div><div class="line">        // return模板文件的名称，对应src/main/resources/templates/index.ftl</div><div class="line">        return &quot;index&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认在 <code>src/main/resources/templates</code>目录下增加<code>index.ftl</code>文件</p><blockquote><p>注意Freemarker模版的后缀默认是<code>ftl</code>,Thymeleaf模版后缀默认是<code>html</code></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h4&gt;我的博客：$&#123;host&#125;！&lt;/h4&gt;</div><div class="line">&lt;h1&gt;quanke.name&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>增加使用 <code>kotlin</code>语言实现的 <code>Spring Boot</code>启动方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>application.yml</code>文中增加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#设定ftl文件路径</div><div class="line">spring:</div><div class="line">  freemarker:</div><div class="line">    template-loader-path: classpath:/templates</div></pre></td></tr></table></figure><p>如上页面，直接打开html页面展现Hello World，但是启动程序后，访问<a href="http://localhost:8080/，则是展示Controller中host的值：http://quanke.name，做到了不破坏HTML自身内容的数据逻辑分离。" target="_blank" rel="external">http://localhost:8080/，则是展示Controller中host的值：http://quanke.name，做到了不破坏HTML自身内容的数据逻辑分离。</a></p><p>更多 <code>FreeMarker</code>相关的，还请访问 <a href="https://freemarker.apache.org/" target="_blank" rel="external">FreeMarker 官网</a> 查询使用。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/quanke/spring-boot-with-kotlin-in-action/chapter11-5-2" target="_blank" rel="external">https://github.com/quanke/spring-boot-with-kotlin-in-action/chapter11-5-2</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-web-freemarker" target="_blank" rel="external">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-web-freemarker</a></li></ul><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.jianshu.com/p/884632f71bc7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Spring Boot 与 Kotlin 使用Thymeleaf模板引擎渲染web视
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 与 kotlin 使用Thymeleaf模板引擎渲染web视图</title>
    <link href="http://quanke.name/posts/15187/"/>
    <id>http://quanke.name/posts/15187/</id>
    <published>2018-02-02T16:01:48.000Z</published>
    <updated>2018-03-02T09:41:38.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在<a href="https://www.jianshu.com/p/56f81ab8ee45" target="_blank" rel="external">《使用Spring Boot和Kotlin创建RESTfull API》</a>一文中，我们完成了一个简单的RESTful 服务，体验了Spring Boot 与 kotlin结合的神力，但是往往我们也需要web的支持，那么本篇就在上一个文章的基础上介绍Spring Boot 与 kotlin 使用Thymeleaf模板引擎渲染web视图。</p></blockquote><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>在我们开发Web应用的时候，需要引用大量的js、css、图片等静态资源，使用Spring Boot 与 kotlin如何去支持这些静态资源？，很简单。</p><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>Spring Boot默认提供静态资源目录位置需置于<code>classpath</code>下，目录名需符合如下规则：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/static</div><div class="line">/public</div><div class="line">/resources</div><div class="line">/META-INF/resources</div></pre></td></tr></table></figure><blockquote><p>举例：我们可以在src/main/resources/目录下创建static，在该位置放置一个图片文件。启动程序后，尝试访问<a href="http://localhost:8080/ruby.jpg。如能显示图片，配置成功。" target="_blank" rel="external">http://localhost:8080/ruby.jpg。如能显示图片，配置成功。</a></p></blockquote><h2 id="渲染Web页面"><a href="#渲染Web页面" class="headerlink" title="渲染Web页面"></a>渲染Web页面</h2><p>之前通过<code>@RestController</code>处理请求，返回的内容为json对象。如果需要渲染<code>html</code>页面，要如何实现呢？</p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>在<code>Spring Boot</code>推荐的模板引擎下，我们可以很快的上手开发动态网站。</p><p><code>Spring Boot</code>提供了默认配置的模板引擎主要有以下几种：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Thymeleaf</div><div class="line">FreeMarker</div><div class="line">Groovy</div><div class="line">Mustache</div></pre></td></tr></table></figure><p>Spring Boot建议使用这些模板引擎，避免使用JSP，若一定要使用JSP将无法实现Spring Boot的多种特性，具体可见后文：支持JSP的配置</p><p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：<code>src/main/resources/templates</code>。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。</p><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p><code>Thymeleaf</code>是一个<code>XML/XHTML/HTML5</code>模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p><h3 id="示例模板："><a href="#示例模板：" class="headerlink" title="示例模板："></a>示例模板：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">    &lt;title&gt;quanke.name&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 th:text=&quot;$&#123;host&#125;&quot;&gt;Hello World&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>可以看到Thymeleaf主要以属性的方式加入到html标签中，浏览器在解析html时，当检查到没有的属性时候会忽略，所以Thymeleaf的模板可以通过浏览器直接打开展现，这样非常有利于前后端的分离。</p><p>在Spring Boot中使用Thymeleaf，只需要引入下面依赖，并在默认的模板路径src/main/resources/templates下编写模板文件即可完成。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">compile &quot;org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version&quot;</div></pre></td></tr></table></figure><p>在完成配置之后，举一个简单的例子，在快速入门工程的基础上，举一个简单的示例来通过Thymeleaf渲染一个页面。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">import org.springframework.stereotype.Controller</div><div class="line">import org.springframework.ui.ModelMap</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/10.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">class HelloController &#123;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/&quot;)</div><div class="line">    fun index(map: ModelMap): String &#123;</div><div class="line">//        / 加入一个属性，用来在模板中读取</div><div class="line">        map.addAttribute(&quot;host&quot;, &quot;http://quanke.name&quot;)</div><div class="line">        // return模板文件的名称，对应src/main/resources/templates/index.html</div><div class="line">        return &quot;index&quot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认在 <code>src/main/resources/templates</code>目录下增加<code>index.html</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">    &lt;title&gt;quanke.name&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1 th:text=&quot;$&#123;host&#125;&quot;&gt;Hello World&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>增加使用 <code>kotlin</code>语言实现的 <code>Spring Boot</code>启动方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.springframework.boot.SpringApplication</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by http://quanke.name on 2018/1/9.</div><div class="line"> */</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    SpringApplication.run(Application::class.java, *args)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如上页面，直接打开html页面展现Hello World，但是启动程序后，访问<a href="http://localhost:8080/，则是展示Controller中host的值：http://quanke.name，做到了不破坏HTML自身内容的数据逻辑分离。" target="_blank" rel="external">http://localhost:8080/，则是展示Controller中host的值：http://quanke.name，做到了不破坏HTML自身内容的数据逻辑分离。</a></p><p>更多<code>Thymeleaf</code>的页面语法，还请访问<a href="http://www.thymeleaf.org/documentation.html" target="_blank" rel="external">Thymeleaf的官方文档</a>查询使用。</p><p>Thymeleaf的默认参数配置</p><p>如有需要修改默认配置的时候，只需复制下面要修改的属性到<code>application.yml</code>中，并修改成需要的值，如修改模板文件的扩展名，修改默认的模板路径等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Enable template caching.</div><div class="line">spring.thymeleaf.cache=true </div><div class="line"># Check that the templates location exists.</div><div class="line">spring.thymeleaf.check-template-location=true </div><div class="line"># Content-Type value.</div><div class="line">spring.thymeleaf.content-type=text/html </div><div class="line"># Enable MVC Thymeleaf view resolution.</div><div class="line">spring.thymeleaf.enabled=true </div><div class="line"># Template encoding.</div><div class="line">spring.thymeleaf.encoding=UTF-8 </div><div class="line"># Comma-separated list of view names that should be excluded from resolution.</div><div class="line">spring.thymeleaf.excluded-view-names= </div><div class="line"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.</div><div class="line">spring.thymeleaf.mode=HTML5 </div><div class="line"># Prefix that gets prepended to view names when building a URL.</div><div class="line">spring.thymeleaf.prefix=classpath:/templates/ </div><div class="line"># Suffix that gets appended to view names when building a URL.</div><div class="line">spring.thymeleaf.suffix=.html  spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</div></pre></td></tr></table></figure><blockquote><p>测试环境或者开发环境避免出现不可预期问题一般设置：<code>spring.thymeleaf.cache=true</code></p></blockquote><h2 id="支持JSP的配置"><a href="#支持JSP的配置" class="headerlink" title="支持JSP的配置"></a>支持JSP的配置</h2><p>Spring Boot并不建议使用，但如果一定要使用，可以参考此工程作为脚手架：<a href="https://github.com/spring-projects/spring-boot/tree/v1.3.2.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp" target="_blank" rel="external">JSP</a>支持</p><p>总的来说Kotlin 对于Spring Boot的支持非常好，只需要把Java语言的spring boot使用，翻译成kotlin就可以。</p><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.jianshu.com/p/56f81ab8ee45&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《使用Spring Boot和Kotlin创建RESTfull API》&lt;/a&gt;一文中
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Boot和Kotlin创建RESTfull API</title>
    <link href="http://quanke.name/posts/55365/"/>
    <id>http://quanke.name/posts/55365/</id>
    <published>2018-02-02T16:00:25.000Z</published>
    <updated>2018-03-02T09:41:38.788Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Kotlin</code> 结合<code>SpringBoot</code> 开发一个<code>RESTFul</code>版本的 <code>Hello World</code>。</p><p>如果单单Kotlin 我是不相信在短时间内有产生多大的风波，但是如果Kotlin​ 能和 Java 开发神器  SpringBoot 结合起来，我感觉能飞。。。</p><h4 id="1-首先新建Gradle的Kotlin工程"><a href="#1-首先新建Gradle的Kotlin工程" class="headerlink" title="1.首先新建Gradle的Kotlin工程"></a>1.首先新建<code>Gradle</code>的<code>Kotlin</code>工程</h4><p>打开IDEA ，File-&gt;New-&gt;Project</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-cc8db2c5f2828026?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="New-&gt;Project "></p><p>输入相关信息之后下一步：</p><p>一般<code>GroupId</code>为公司域名反着写，加上项目名字</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-b622a516a2536b20?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>建议选中 <code>Use auto-import</code>，自动导包 ,使用本地 <code>Gradle</code>，但是需要先安装Gradle（<a href="https://gradle.org/install/" target="_blank" rel="external">https://gradle.org/install/</a>）</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-0864d5a15edb38e4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Use auto-import"></p><p>如果没有选择 使用本地 Gradle 项目创建完成之后Gradle的包需要下载，这个时间有点长，以前做Android就深受其苦，所有要做好心理准备，除非你有一个好用的FQ工具。</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-091572e29e61e6e9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gradle 库下载中"></p><p>项目创建完成之后会生成一个<code>Gradle</code>文件<code>build.gradle</code>和<code>settings.gradle</code>,<code>settings.gradle</code>文件我们暂且不管，先看看<code>build.gradle</code>文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin.restful&apos;</div><div class="line"></div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line"></div><div class="line">ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line"></div><div class="line">mavenCentral()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line"></div><div class="line">mavenCentral()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line"></div><div class="line">kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileTestKotlin &#123;</div><div class="line"></div><div class="line">kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/432952-4d6051227095b1a9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载Gradle 依赖"></p><blockquote><p>下载依赖和插件也是一个漫长痛苦的过程。各位不要心急，慢慢来，一次不行多试几次。</p></blockquote><p>从生成的配置文件看，<code>IDEA</code>已经自动把<code>Gradle</code>构建<code>Kotlin</code>工程插件<code>kotlin-gradle-plugin</code>，以及<code>Kotlin</code></p><p>标准库<code>kotlin-stdlib</code>添加到<code>build.gradle</code>文件中了。</p><h4 id="2-配置build-gradle文件"><a href="#2-配置build-gradle文件" class="headerlink" title="2.配置build.gradle文件"></a>2.配置<code>build.gradle</code>文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">group &apos;name.quanke.kotlin.rest&apos;</div><div class="line"></div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line"></div><div class="line">ext.kotlin_version = &apos;1.2.10&apos;</div><div class="line"></div><div class="line">ext.spring_boot_version = &apos;1.5.4.RELEASE&apos;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line"></div><div class="line">mavenCentral()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line"></div><div class="line">classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line"></div><div class="line">// org.jetbrains.kotlin:kotlin-allopen 是全开放编译器插件。我们使用Kotlin 调用Java的Spring AOP框架和库，需要类为 open（可被继承实现），而Kotlin 类和函数都是默认 final 的，这样我们需要为每个类和函数前面加上open修饰符。</div><div class="line"></div><div class="line">// 这样的代码写起来，可费事了。还好，我们有all-open 编译器插件。它会适配 Kotlin 以满足这些框架的需求，并使用指定的注解标注类而其成员无需显式使用 open 关键字打开。 例如，当我们使用 Spring 时，就不需要打开所有的类，跟我们在Java中写代码一样，只需要用相应的注解标注即可。</div><div class="line"></div><div class="line">classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin&apos;</div><div class="line"></div><div class="line">apply plugin: &quot;kotlin-spring&quot; // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin</div><div class="line"></div><div class="line">apply plugin: &apos;org.springframework.boot&apos;</div><div class="line"></div><div class="line">jar &#123;</div><div class="line"></div><div class="line">baseName = &apos;0_2RestfulApi-service&apos;</div><div class="line"></div><div class="line">version = &apos;0.1.0&apos;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line"></div><div class="line">mavenCentral()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line"></div><div class="line">compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line"></div><div class="line">compile &apos;org.springframework.boot:spring-boot-starter-web&apos;</div><div class="line"></div><div class="line">testCompile(&apos;org.springframework.boot:spring-boot-starter-test&apos;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileKotlin &#123;</div><div class="line"></div><div class="line">kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">compileTestKotlin &#123;</div><div class="line"></div><div class="line">kotlinOptions.jvmTarget = &quot;1.8&quot;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-创建包"><a href="#3-创建包" class="headerlink" title="3.创建包"></a>3.创建包</h4><p>在kotlin目录下面创建：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name.quanke.kotlin.rest</div></pre></td></tr></table></figure></p><p>注意：不能直接在kotlin目录下面写Application 类，不然会报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Your ApplicationContext is unlikely to start due to a @ComponentScan of the default package</div></pre></td></tr></table></figure></p><p>3.创建数据模型Greeting类：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">package name.quanke.kotlin.rest</div><div class="line"></div><div class="line">/**</div><div class="line"></div><div class="line">* Created by http://quanke.name on 2018/1/9.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">data class Greeting(val id: Long, val content: String)</div></pre></td></tr></table></figure></p><blockquote><p>如果是Java写的话，想象一下这需要多少行代码，看看kotlin，不明则厉。。。</p></blockquote><h4 id="5-创建GreetingController"><a href="#5-创建GreetingController" class="headerlink" title="5.创建GreetingController"></a>5.创建GreetingController</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">package name.quanke.kotlin.rest</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.GetMapping</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.RequestParam</div><div class="line"></div><div class="line">import org.springframework.web.bind.annotation.RestController</div><div class="line"></div><div class="line">import java.util.concurrent.atomic.AtomicLong</div><div class="line"></div><div class="line">/**</div><div class="line"></div><div class="line">* Created by http://quanke.name on 2018/1/9.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">@RestController</div><div class="line"></div><div class="line">class GreetingController &#123;</div><div class="line"></div><div class="line">val counter = AtomicLong()</div><div class="line"></div><div class="line">@GetMapping(&quot;/greeting&quot;)</div><div class="line"></div><div class="line">fun greeting(@RequestParam(value = &quot;name&quot;, defaultValue = &quot;World&quot;) name: String) =</div><div class="line"></div><div class="line">Greeting(counter.incrementAndGet(), &quot;Hello, $name&quot;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="6-创建Application"><a href="#6-创建Application" class="headerlink" title="6.创建Application"></a>6.创建<code>Application</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">package name.quanke.kotlin.rest</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication</div><div class="line"></div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication</div><div class="line"></div><div class="line">/**</div><div class="line"></div><div class="line">* Created by http://quanke.name on 2018/1/9.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">@SpringBootApplication</div><div class="line"></div><div class="line">class Application</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line"></div><div class="line">SpringApplication.run(Application::class.java, *args)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击Gradle的bootRun：</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-056fdad69b06e79c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bootRun"></p><p>或者点击</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-a0534039b6e2e494?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Run"></p><p><img src="http://upload-images.jianshu.io/upload_images/432952-ba09f7c75789f836?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行成功的样子"></p><p>如果没有毛病，访问</p><p><a href="http://127.0.0.1:8080/greeting?name=quanke.name" target="_blank" rel="external">http://127.0.0.1:8080/greeting?name=quanke.name</a></p><p>输出：</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-cddd8ac0605ea11b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>那么恭喜你，一个kotlin 和spring boot的web服务就这么搞定了。。。</p><p>服务默认是8080端口，如果8080端口刚好被占用了，那在resources目录下新建一个application.yml文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server:</div><div class="line">  port: 1234</div></pre></td></tr></table></figure><p>把端口改成你想要的。</p><p>当然这只是开始的演示，么有什么卵用。。。之后可以用于生产的demo，呼之欲出。</p><p>欢迎关注：</p><p><a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;code&gt;Kotlin&lt;/code&gt; 结合&lt;code&gt;SpringBoot&lt;/code&gt; 开发一个&lt;code&gt;RESTFul&lt;/code&gt;版本的 &lt;code&gt;Hello World&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果单单Kotlin 我是不相信在短时间内有产生多大的风
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>我的第一个Kotlin应用</title>
    <link href="http://quanke.name/posts/41862/"/>
    <id>http://quanke.name/posts/41862/</id>
    <published>2018-02-02T14:38:51.000Z</published>
    <updated>2018-03-02T09:41:38.788Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始正式学习Kotlin这门语言，学习之前看了很多关于Kotlin的推广文，本来一门新的语言很难普及，有Google站台，心里有底了很多，本人做过Android开发，所以对于Android相关的东西还是比较关注的。</p><p>废话说了这么多，现在正式开始我的第一个Kotlin应用，当然从打印<code>Hello World</code>开始。</p><p><code>Kotlin</code>有多种方式打印<code>Hello World</code>，比如通过命令行、通过应用等。按道理通过命令行打印“Hello World”比较简单，但是我今天不去讲命令行的实现方式，因为在之后的学习中用的很少、而且命令行的形式比较简单。所有我们主要是通过应用的方式去学习。有一些教程使用 <code>gradle</code>去创建项目，我觉得第一个<code>Kotlin</code>应用太麻烦了，怕不懂，所以我今天实现一个极其简单的Kotlin应用。</p><p>我这里用的IDE是<code>Intelli IDEA</code>，亲儿子当然要用，不解释，如果亲一定要用其他的，不好意思，我这里不提供方法，因为我也不会。</p><p>首先安装最新版本的Intelli IDEA，<code>File-&gt;New-&gt;Project</code></p><p><img src="http://upload-images.jianshu.io/upload_images/432952-00d05466821aa9c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建Kotlin项目"></p><p>选择 Kotlin -&gt; Kotlin/JVM</p><p>新建完项目之后，新建<code>HelloWorld.kt</code>类：</p><p><img src="http://upload-images.jianshu.io/upload_images/432952-30f6e3f0910213b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建HelloWorld.kt类"></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">package name.quanke.kotlin.helloworld</div><div class="line"></div><div class="line">class HelloWorld &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"></div><div class="line">* Created by quanke.name on 2018/1/8.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line"></div><div class="line">println(&quot;Hello World!&quot;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行后输出：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello World!</div></pre></td></tr></table></figure></p><p>到此为止我的第一个Kotlin应用结束了！</p><p>这是<a href="http://quanke.name/spring-boot-with-kotlin-in-action">《Spring Boot in kotlin 实战》</a>的开始篇，欢迎关注！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开始正式学习Kotlin这门语言，学习之前看了很多关于Kotlin的推广文，本来一门新的语言很难普及，有Google站台，心里有底了很多，本人做过Android开发，所以对于Android相关的东西还是比较关注的。&lt;/p&gt;
&lt;p&gt;废话说了这么多，现在正式开始我的第一个K
      
    
    </summary>
    
      <category term="Spring Boot与kotlin实战" scheme="http://quanke.name/categories/Spring-Boot%E4%B8%8Ekotlin%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="kotlin" scheme="http://quanke.name/tags/kotlin/"/>
    
      <category term="spring boot" scheme="http://quanke.name/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Java API 搜索之Scrolls(四)</title>
    <link href="http://quanke.name/posts/3267/"/>
    <id>http://quanke.name/posts/3267/</id>
    <published>2017-12-06T14:47:00.000Z</published>
    <updated>2018-03-02T09:41:38.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Using-scrolls-in-Java"><a href="#Using-scrolls-in-Java" class="headerlink" title="Using scrolls in Java"></a>Using scrolls in Java</h3><p>首先需要阅读 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search-request-scroll.html" target="_blank" rel="external">scroll documentation</a></p><blockquote><p>一般搜索请求都是返回一”页”数据，无论数据量多大都一起返回给用户，Scroll API可以允许我们检索大量数据（甚至全部数据）。Scroll API允许我们做一个初始阶段搜索并且持续批量从Elasticsearch里拉取结果直到没有结果剩下。这有点像传统数据库里的cursors（游标）。<br>Scroll API的创建并不是为了实时的用户响应，而是为了处理大量的数据（Scrolling is not intended for real time user requests, but rather for processing large amounts of data）。从 scroll 请求返回的结果只是反映了 search 发生那一时刻的索引状态，就像一个快照(The results that are returned from a scroll request reflect the state of the index at the time that the initial search request was made, like a snapshot in time)。后续的对文档的改动（索引、更新或者删除）都只会影响后面的搜索请求。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import static org.elasticsearch.index.query.QueryBuilders.*;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">QueryBuilder qb = termQuery(&quot;multi&quot;, &quot;test&quot;);</div><div class="line"></div><div class="line">SearchResponse scrollResp = client.prepareSearch(test)</div><div class="line">        .addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC)</div><div class="line">        .setScroll(new TimeValue(60000)) //为了使用 scroll，初始搜索请求应该在查询中指定 scroll 参数，告诉 Elasticsearch 需要保持搜索的上下文环境多长时间（滚动时间）</div><div class="line">        .setQuery(qb)</div><div class="line">        .setSize(100).get(); //max of 100 hits will be returned for each scroll</div><div class="line">//Scroll until no hits are returned</div><div class="line">do &#123;</div><div class="line">    for (SearchHit hit : scrollResp.getHits().getHits()) &#123;</div><div class="line">        //Handle the hit...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    scrollResp = client.prepareSearchScroll(scrollResp.getScrollId()).setScroll(new TimeValue(60000)).execute().actionGet();</div><div class="line">&#125; while(scrollResp.getHits().getHits().length != 0); // Zero hits mark the end of the scroll and the while loop.</div></pre></td></tr></table></figure><blockquote><p>如果超过滚动时间，继续使用该滚动ID搜索数据，则会报错：</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Caused by: SearchContextMissingException[No search context found for id [2861]]</div><div class="line">at org.elasticsearch.search.SearchService.findContext(SearchService.java:613)</div><div class="line">at org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:403)</div><div class="line">at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryScrollTransportHandler.messageReceived(SearchServiceTransportAction.java:384)</div><div class="line">at org.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryScrollTransportHandler.messageReceived(SearchServiceTransportAction.java:381)</div><div class="line">at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:33)</div><div class="line">at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:75)</div><div class="line">at org.elasticsearch.transport.TransportService$4.doRun(TransportService.java:376)</div><div class="line">at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure><blockquote><p>虽然当滚动有效时间已过，搜索上下文(Search Context)会自动被清除，但是一值保持滚动代价也是很大的，所以当我们不在使用滚动时要尽快使用Clear-Scroll API进行清除。</p></blockquote><h2 id="清除Scroll"><a href="#清除Scroll" class="headerlink" title="清除Scroll"></a>清除Scroll</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line">   * 清除滚动ID</div><div class="line">   * @param client</div><div class="line">   * @param scrollIdList</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  public static boolean clearScroll(Client client, List&lt;String&gt; scrollIdList)&#123;</div><div class="line">      ClearScrollRequestBuilder clearScrollRequestBuilder = client.prepareClearScroll();</div><div class="line">      clearScrollRequestBuilder.setScrollIds(scrollIdList);</div><div class="line">      ClearScrollResponse response = clearScrollRequestBuilder.get();</div><div class="line">      return response.isSucceeded();</div><div class="line">  &#125;</div><div class="line">  /**</div><div class="line">   * 清除滚动ID</div><div class="line">   * @param client</div><div class="line">   * @param scrollId</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  public static boolean clearScroll(Client client, String scrollId)&#123;</div><div class="line">      ClearScrollRequestBuilder clearScrollRequestBuilder = client.prepareClearScroll();</div><div class="line">      clearScrollRequestBuilder.addScrollId(scrollId);</div><div class="line">      ClearScrollResponse response = clearScrollRequestBuilder.get();</div><div class="line">      return response.isSucceeded();</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">public class ScrollsAPI extends ElasticsearchClientBase &#123;</div><div class="line"></div><div class="line">    private String scrollId;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testScrolls() throws Exception &#123;</div><div class="line"></div><div class="line">        SearchResponse scrollResp = client.prepareSearch(&quot;twitter&quot;)</div><div class="line">                .addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC)</div><div class="line">                .setScroll(new TimeValue(60000)) //为了使用 scroll，初始搜索请求应该在查询中指定 scroll 参数，告诉 Elasticsearch 需要保持搜索的上下文环境多长时间（滚动时间）</div><div class="line">                .setQuery(QueryBuilders.termQuery(&quot;user&quot;, &quot;kimchy&quot;))                 // Query 查询条件</div><div class="line">                .setSize(5).get(); //max of 100 hits will be returned for each scroll</div><div class="line">        //Scroll until no hits are returned</div><div class="line"></div><div class="line">        scrollId = scrollResp.getScrollId();</div><div class="line">        do &#123;</div><div class="line">            for (SearchHit hit : scrollResp.getHits().getHits()) &#123;</div><div class="line">                //Handle the hit...</div><div class="line"></div><div class="line">                System.out.println(&quot;&quot; + hit.getSource().toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            scrollResp = client.prepareSearchScroll(scrollId).setScroll(new TimeValue(60000)).execute().actionGet();</div><div class="line">        &#125;</div><div class="line">        while (scrollResp.getHits().getHits().length != 0); // Zero hits mark the end of the scroll and the while loop.</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void tearDown() throws Exception &#123;</div><div class="line">        ClearScrollRequestBuilder clearScrollRequestBuilder = client.prepareClearScroll();</div><div class="line">        clearScrollRequestBuilder.addScrollId(scrollId);</div><div class="line">        ClearScrollResponse response = clearScrollRequestBuilder.get();</div><div class="line"></div><div class="line">        if (response.isSucceeded()) &#123;</div><div class="line">            System.out.println(&quot;成功清除&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        super.tearDown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p><a href="https://gitee.com/quanke/elasticsearch-java-study/blob/master/src/test/java/name/quanke/es/study/search/ScrollsAPI.java" target="_blank" rel="external">ScrollsAPI.java</a></p></li><li><p><a href="https://gitee.com/quanke/elasticsearch-java-study" target="_blank" rel="external">本手册完整实例</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Using-scrolls-in-Java&quot;&gt;&lt;a href=&quot;#Using-scrolls-in-Java&quot; class=&quot;headerlink&quot; title=&quot;Using scrolls in Java&quot;&gt;&lt;/a&gt;Using scrolls in Java&lt;/
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://quanke.name/categories/es/"/>
    
    
      <category term="Elasticsearch" scheme="http://quanke.name/tags/es/"/>
    
      <category term="大数据" scheme="http://quanke.name/tags/bdaga/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Java API 搜索之简介（三）</title>
    <link href="http://quanke.name/posts/44811/"/>
    <id>http://quanke.name/posts/44811/</id>
    <published>2017-12-06T14:25:00.000Z</published>
    <updated>2018-03-02T09:41:38.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-Java-API-搜索之简介"><a href="#Elasticsearch-Java-API-搜索之简介" class="headerlink" title="Elasticsearch Java API 搜索之简介"></a>Elasticsearch Java API 搜索之简介</h1><p>搜索查询，返回查询匹配的结果，搜索一个index / type 或者多个index / type，可以使用 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-query-dsl.html" target="_blank" rel="external">query Java API</a> 作为查询条件，下面是例子：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.elasticsearch.action.search.SearchResponse;</div><div class="line">import org.elasticsearch.action.search.SearchType;</div><div class="line">import org.elasticsearch.index.query.QueryBuilders.*;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SearchResponse response = client.prepareSearch(&quot;index1&quot;, &quot;index2&quot;)</div><div class="line">        .setTypes(&quot;type1&quot;, &quot;type2&quot;)</div><div class="line">        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)</div><div class="line">        .setQuery(QueryBuilders.termQuery(&quot;multi&quot;, &quot;test&quot;))                 // Query 查询条件</div><div class="line">        .setPostFilter(QueryBuilders.rangeQuery(&quot;age&quot;).from(12).to(18))     // Filter 过滤</div><div class="line">        .setFrom(0).setSize(60).setExplain(true)</div><div class="line">        .get();</div></pre></td></tr></table></figure><p>所有的参数都是可选的，下面是最简单的调用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// MatchAll on the whole cluster with all default options</div><div class="line">SearchResponse response = client.prepareSearch().get();</div></pre></td></tr></table></figure><blockquote><p>尽管Java API默认提供<code>QUERY_AND_FETCH</code> 和 <code>DFS_QUERY_AND_FETCH</code> 两种 search types ，但是这种模式应该由系统选择，用户不要手动指定</p></blockquote><p>更多请移步 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/search.html" target="_blank" rel="external">REST search</a> 文档</p><blockquote><p>如何有任何问题请关注微信公众号给我留言</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elasticsearch-Java-API-搜索之简介&quot;&gt;&lt;a href=&quot;#Elasticsearch-Java-API-搜索之简介&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch Java API 搜索之简介&quot;&gt;&lt;/a&gt;El
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://quanke.name/categories/es/"/>
    
    
      <category term="Elasticsearch" scheme="http://quanke.name/tags/es/"/>
    
      <category term="大数据" scheme="http://quanke.name/tags/bdaga/"/>
    
  </entry>
  
  <entry>
    <title>多种方式解决spring boot swagger ui使用 nginx 部署后无法使用问题</title>
    <link href="http://quanke.name/posts/21506/"/>
    <id>http://quanke.name/posts/21506/</id>
    <published>2017-12-05T14:19:00.000Z</published>
    <updated>2018-03-02T09:41:38.801Z</updated>
    
    <content type="html"><![CDATA[<ul><li>欢迎关注<a href="http://quanke.name/">http://quanke.name/</a></li><li>转载请注明出处，谢谢</li></ul><p><code>spring boot</code> 使用 <code>swagger ui</code> 做接口文档，很是方便</p><p>本地测试都没有问题</p><p>将一个<code>Spring boot</code>工程部署到生产环境， 配置<code>nginx</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  quanke.name;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3101;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>浏览器中访问： quanke.name, 选中某一接口点击try it out,显示:</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">No Content。</div></pre></td></tr></table></figure><p>Request  URL:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://127.0.0.1:3101/test</div></pre></td></tr></table></figure></p><p>而不是</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://quanke.name/test</div></pre></td></tr></table></figure><p>通过朋友+搜索知道有两种方法解决此问题：</p><h3 id="第一种：修改nginx配置文件"><a href="#第一种：修改nginx配置文件" class="headerlink" title="第一种：修改nginx配置文件"></a>第一种：修改nginx配置文件</h3><p>把<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  quanke.name;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3101;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  quanke.name;</div><div class="line">    </div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3101;</div><div class="line">        proxy_set_header Host $host; # 指定host</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第二种：启动工程时显式添加属性"><a href="#第二种：启动工程时显式添加属性" class="headerlink" title="第二种：启动工程时显式添加属性"></a>第二种：启动工程时显式添加属性</h3><p>Java 启动的时候指定<code>swagger.v2.host</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-Dspringfox.documentation.swagger.v2.host=quanke.name</div></pre></td></tr></table></figure><p>启动命令实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java -jar -Dspringfox.documentation.swagger.v2.host=quanke.name /data/app/quanke/api.jar</div></pre></td></tr></table></figure><p>或者在配置文件（application.properties）中进行配置</p><blockquote><p>如何有任何问题请关注微信公众号给我留言</p></blockquote><p><img src="https://static.oschina.net/uploads/img/201711/08183543_ysUa.jpg" alt="全科的公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;欢迎关注&lt;a href=&quot;http://quanke.name/&quot;&gt;http://quanke.name/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;转载请注明出处，谢谢&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;spring boot&lt;/code&gt; 使用 &lt;code&gt;swagg
      
    
    </summary>
    
      <category term="服务端开发" scheme="http://quanke.name/categories/service/"/>
    
    
      <category term="java" scheme="http://quanke.name/tags/java/"/>
    
      <category term="spirng boot" scheme="http://quanke.name/tags/spirng-boot/"/>
    
      <category term="nginx" scheme="http://quanke.name/tags/nginx/"/>
    
      <category term="swagger ui" scheme="http://quanke.name/tags/swagger-ui/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Java API 索引的增删改查（二）</title>
    <link href="http://quanke.name/posts/51297/"/>
    <id>http://quanke.name/posts/51297/</id>
    <published>2017-11-15T12:10:00.000Z</published>
    <updated>2018-03-02T09:41:38.742Z</updated>
    
    <content type="html"><![CDATA[<p>本节介绍以下 CRUD API：</p><p> 单文档  APIs</p><ul><li><a href="document-apis/index-api.md">Index API</a></li><li><a href="document-apis/get-api.md">Get API</a></li><li><a href="document-apis/delete-api.md">Delete API</a></li><li><a href="document-apis/delete-by-query-api.md">Delete By Query API</a></li><li><a href="document-apis/update-api.md">Update API</a></li></ul><p>多文档 APIs</p><ul><li><a href="document-apis/multi-get-api.md">Multi Get API</a></li><li><a href="document-apis/bulk-api.md">Bulk API</a></li><li><a href="document-apis/using-bulk-processor.md">Using Bulk Processor</a></li></ul><p>Multi Get API<br>Bulk API</p><blockquote><p>注意:所有的单文档的CRUD API，index参数只能接受单一的索引库名称，或者是一个指向单一索引库的alias。</p></blockquote><h3 id="Index-API"><a href="#Index-API" class="headerlink" title="Index API"></a>Index API</h3><p>Index API 允许我们存储一个JSON格式的文档，使数据可以被搜索。文档通过index、type、id唯一确定。我们可以自己提供一个id，或者也使用Index API 为我们自动生成一个。</p><p>这里有几种不同的方式来产生JSON格式的文档(document)：</p><ul><li>手动方式，使用原生的byte[]或者String</li><li>使用Map方式，会自动转换成与之等价的JSON</li><li>使用第三方库来序列化beans，如Jackson</li><li>使用内置的帮助类 XContentFactory.jsonBuilder()</li></ul><h4 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/mapping-date-format.html" target="_blank" rel="external">数据格式</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">String json = &quot;&#123;&quot; +</div><div class="line">        &quot;\&quot;user\&quot;:\&quot;kimchy\&quot;,&quot; +</div><div class="line">        &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +</div><div class="line">        &quot;\&quot;message\&quot;:\&quot;trying out Elasticsearch\&quot;&quot; +</div><div class="line">    &quot;&#125;&quot;;</div></pre></td></tr></table></figure></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**  </div><div class="line"> * 手动生成JSON  </div><div class="line"> */  </div><div class="line">@Test  </div><div class="line">public void CreateJSON()&#123;  </div><div class="line">      </div><div class="line">    String json = &quot;&#123;&quot; +  </div><div class="line">            &quot;\&quot;user\&quot;:\&quot;fendo\&quot;,&quot; +  </div><div class="line">            &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +  </div><div class="line">            &quot;\&quot;message\&quot;:\&quot;Hell word\&quot;&quot; +  </div><div class="line">        &quot;&#125;&quot;;  </div><div class="line">      </div><div class="line">    IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">            .setSource(json)  </div><div class="line">            .get();  </div><div class="line">    System.out.println(response.getResult());  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Map方式"><a href="#Map方式" class="headerlink" title="Map方式"></a>Map方式</h4><p>Map是key:value数据类型，可以代表json结构.</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Map&lt;String, Object&gt; json = new HashMap&lt;String, Object&gt;();</div><div class="line">json.put(&quot;user&quot;,&quot;kimchy&quot;);</div><div class="line">json.put(&quot;postDate&quot;,new Date());</div><div class="line">json.put(&quot;message&quot;,&quot;trying out Elasticsearch&quot;);</div></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> /**  </div><div class="line"> * 使用集合  </div><div class="line"> */  </div><div class="line">@Test  </div><div class="line">public void CreateList()&#123;  </div><div class="line">      </div><div class="line">    Map&lt;String, Object&gt; json = new HashMap&lt;String, Object&gt;();  </div><div class="line">    json.put(&quot;user&quot;,&quot;kimchy&quot;);  </div><div class="line">    json.put(&quot;postDate&quot;,&quot;2013-01-30&quot;);  </div><div class="line">    json.put(&quot;message&quot;,&quot;trying out Elasticsearch&quot;);  </div><div class="line">      </div><div class="line">    IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">            .setSource(json)  </div><div class="line">            .get();  </div><div class="line">    System.out.println(response.getResult());  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="序列化方式"><a href="#序列化方式" class="headerlink" title="序列化方式"></a>序列化方式</h4><p>ElasticSearch已经使用了jackson，可以直接使用它把javabean转为json.</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import com.fasterxml.jackson.databind.*;</div><div class="line"></div><div class="line">// instance a json mapper</div><div class="line">ObjectMapper mapper = new ObjectMapper(); // create once, reuse</div><div class="line"></div><div class="line">// generate json</div><div class="line">byte[] json = mapper.writeValueAsBytes(yourbeaninstance);</div></pre></td></tr></table></figure><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**  </div><div class="line"> * 使用JACKSON序列化  </div><div class="line"> * @throws Exception  </div><div class="line"> */  </div><div class="line">@Test  </div><div class="line">public void CreateJACKSON() throws Exception&#123;  </div><div class="line">      </div><div class="line">    CsdnBlog csdn=new CsdnBlog();  </div><div class="line">    csdn.setAuthor(&quot;fendo&quot;);  </div><div class="line">    csdn.setContent(&quot;这是JAVA书籍&quot;);  </div><div class="line">    csdn.setTag(&quot;C&quot;);  </div><div class="line">    csdn.setView(&quot;100&quot;);  </div><div class="line">    csdn.setTitile(&quot;编程&quot;);  </div><div class="line">    csdn.setDate(new Date().toString());  </div><div class="line">      </div><div class="line">    // instance a json mapper  </div><div class="line">    ObjectMapper mapper = new ObjectMapper(); // create once, reuse  </div><div class="line"></div><div class="line">    // generate json  </div><div class="line">    byte[] json = mapper.writeValueAsBytes(csdn);  </div><div class="line">      </div><div class="line">    IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">            .setSource(json)  </div><div class="line">            .get();  </div><div class="line">    System.out.println(response.getResult());  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="XContentBuilder帮助类方式"><a href="#XContentBuilder帮助类方式" class="headerlink" title="XContentBuilder帮助类方式"></a>XContentBuilder帮助类方式</h4><p>ElasticSearch提供了一个内置的帮助类XContentBuilder来产生JSON文档</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// Index name</div><div class="line">String _index = response.getIndex();</div><div class="line">// Type name</div><div class="line">String _type = response.getType();</div><div class="line">// Document ID (generated or not)</div><div class="line">String _id = response.getId();</div><div class="line">// Version (if it&apos;s the first time you index this document, you will get: 1)</div><div class="line">long _version = response.getVersion();</div><div class="line">// status has stored current instance statement.</div><div class="line">RestStatus status = response.status();</div></pre></td></tr></table></figure><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**  </div><div class="line"> * 使用ElasticSearch 帮助类  </div><div class="line"> * @throws IOException   </div><div class="line"> */  </div><div class="line">@Test  </div><div class="line">public void CreateXContentBuilder() throws IOException&#123;  </div><div class="line">      </div><div class="line">    XContentBuilder builder = XContentFactory.jsonBuilder()  </div><div class="line">            .startObject()  </div><div class="line">                .field(&quot;user&quot;, &quot;ccse&quot;)  </div><div class="line">                .field(&quot;postDate&quot;, new Date())  </div><div class="line">                .field(&quot;message&quot;, &quot;this is Elasticsearch&quot;)  </div><div class="line">            .endObject();  </div><div class="line">      </div><div class="line">    IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodata&quot;).setSource(builder).get();  </div><div class="line">    System.out.println(&quot;创建成功!&quot;);  </div><div class="line">      </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">import java.io.IOException;  </div><div class="line">import java.net.InetAddress;  </div><div class="line">import java.net.UnknownHostException;  </div><div class="line">import java.util.Date;  </div><div class="line">import java.util.HashMap;  </div><div class="line">import java.util.Map;  </div><div class="line">  </div><div class="line">import org.elasticsearch.action.index.IndexResponse;  </div><div class="line">import org.elasticsearch.client.transport.TransportClient;  </div><div class="line">import org.elasticsearch.common.settings.Settings;  </div><div class="line">import org.elasticsearch.common.transport.InetSocketTransportAddress;  </div><div class="line">import org.elasticsearch.common.xcontent.XContentBuilder;  </div><div class="line">import org.elasticsearch.common.xcontent.XContentFactory;  </div><div class="line">import org.elasticsearch.transport.client.PreBuiltTransportClient;  </div><div class="line">import org.junit.Before;  </div><div class="line">import org.junit.Test;  </div><div class="line">  </div><div class="line">import com.fasterxml.jackson.core.JsonProcessingException;  </div><div class="line">import com.fasterxml.jackson.databind.ObjectMapper;  </div><div class="line">  </div><div class="line">public class CreateIndex &#123;  </div><div class="line">  </div><div class="line">    private TransportClient client;  </div><div class="line">      </div><div class="line">    @Before  </div><div class="line">    public void getClient() throws Exception&#123;  </div><div class="line">        //设置集群名称  </div><div class="line">        Settings settings = Settings.builder().put(&quot;cluster.name&quot;, &quot;my-application&quot;).build();// 集群名  </div><div class="line">        //创建client  </div><div class="line">        client  = new PreBuiltTransportClient(settings)  </div><div class="line">                .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(&quot;127.0.0.1&quot;), 9300));  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    /**  </div><div class="line">     * 手动生成JSON  </div><div class="line">     */  </div><div class="line">    @Test  </div><div class="line">    public void CreateJSON()&#123;  </div><div class="line">          </div><div class="line">        String json = &quot;&#123;&quot; +  </div><div class="line">                &quot;\&quot;user\&quot;:\&quot;fendo\&quot;,&quot; +  </div><div class="line">                &quot;\&quot;postDate\&quot;:\&quot;2013-01-30\&quot;,&quot; +  </div><div class="line">                &quot;\&quot;message\&quot;:\&quot;Hell word\&quot;&quot; +  </div><div class="line">            &quot;&#125;&quot;;  </div><div class="line">          </div><div class="line">        IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">                .setSource(json)  </div><div class="line">                .get();  </div><div class="line">        System.out.println(response.getResult());  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">      </div><div class="line">    /**  </div><div class="line">     * 使用集合  </div><div class="line">     */  </div><div class="line">    @Test  </div><div class="line">    public void CreateList()&#123;  </div><div class="line">          </div><div class="line">        Map&lt;String, Object&gt; json = new HashMap&lt;String, Object&gt;();  </div><div class="line">        json.put(&quot;user&quot;,&quot;kimchy&quot;);  </div><div class="line">        json.put(&quot;postDate&quot;,&quot;2013-01-30&quot;);  </div><div class="line">        json.put(&quot;message&quot;,&quot;trying out Elasticsearch&quot;);  </div><div class="line">          </div><div class="line">        IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">                .setSource(json)  </div><div class="line">                .get();  </div><div class="line">        System.out.println(response.getResult());  </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    /**  </div><div class="line">     * 使用JACKSON序列化  </div><div class="line">     * @throws Exception  </div><div class="line">     */  </div><div class="line">    @Test  </div><div class="line">    public void CreateJACKSON() throws Exception&#123;  </div><div class="line">          </div><div class="line">        CsdnBlog csdn=new CsdnBlog();  </div><div class="line">        csdn.setAuthor(&quot;fendo&quot;);  </div><div class="line">        csdn.setContent(&quot;这是JAVA书籍&quot;);  </div><div class="line">        csdn.setTag(&quot;C&quot;);  </div><div class="line">        csdn.setView(&quot;100&quot;);  </div><div class="line">        csdn.setTitile(&quot;编程&quot;);  </div><div class="line">        csdn.setDate(new Date().toString());  </div><div class="line">          </div><div class="line">        // instance a json mapper  </div><div class="line">        ObjectMapper mapper = new ObjectMapper(); // create once, reuse  </div><div class="line">  </div><div class="line">        // generate json  </div><div class="line">        byte[] json = mapper.writeValueAsBytes(csdn);  </div><div class="line">          </div><div class="line">        IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodate&quot;)  </div><div class="line">                .setSource(json)  </div><div class="line">                .get();  </div><div class="line">        System.out.println(response.getResult());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    /**  </div><div class="line">     * 使用ElasticSearch 帮助类  </div><div class="line">     * @throws IOException   </div><div class="line">     */  </div><div class="line">    @Test  </div><div class="line">    public void CreateXContentBuilder() throws IOException&#123;  </div><div class="line">          </div><div class="line">        XContentBuilder builder = XContentFactory.jsonBuilder()  </div><div class="line">                .startObject()  </div><div class="line">                    .field(&quot;user&quot;, &quot;ccse&quot;)  </div><div class="line">                    .field(&quot;postDate&quot;, new Date())  </div><div class="line">                    .field(&quot;message&quot;, &quot;this is Elasticsearch&quot;)  </div><div class="line">                .endObject();  </div><div class="line">          </div><div class="line">        IndexResponse response = client.prepareIndex(&quot;fendo&quot;, &quot;fendodata&quot;).setSource(builder).get();  </div><div class="line">        System.out.println(&quot;创建成功!&quot;);  </div><div class="line">          </div><div class="line">          </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>你还可以通过startArray(string)和endArray()方法添加数组。.field()方法可以接受多种对象类型。你可以给它传递数字、日期、甚至其他XContentBuilder对象。</p></blockquote><h3 id="Get-API"><a href="#Get-API" class="headerlink" title="Get API"></a>Get API</h3><p>根据id查看文档：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GetResponse response = client.prepareGet(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;).get();</div></pre></td></tr></table></figure><p>更多请查看 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-get.html" target="_blank" rel="external">rest get API</a> 文档</p><h4 id="配置线程"><a href="#配置线程" class="headerlink" title="配置线程"></a>配置线程</h4><p><code>operationThreaded</code> 设置为 <code>true</code> 是在不同的线程里执行此次操作</p><p>下面的例子是<code>operationThreaded</code> 设置为 <code>false</code> ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GetResponse response = client.prepareGet(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;)</div><div class="line">        .setOperationThreaded(false)</div><div class="line">        .get();</div></pre></td></tr></table></figure></p><h3 id="Delete-API"><a href="#Delete-API" class="headerlink" title="Delete API"></a>Delete API</h3><p>根据ID删除：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DeleteResponse response = client.prepareDelete(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;).get();</div></pre></td></tr></table></figure><p>更多请查看 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-delete.html" target="_blank" rel="external">delete API</a> 文档</p><h4 id="配置线程-1"><a href="#配置线程-1" class="headerlink" title="配置线程"></a>配置线程</h4><p><code>operationThreaded</code> 设置为 <code>true</code> 是在不同的线程里执行此次操作</p><p>下面的例子是<code>operationThreaded</code> 设置为 <code>false</code> ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GetResponse response = client.prepareGet(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;)</div><div class="line">        .setOperationThreaded(false)</div><div class="line">        .get();</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DeleteResponse response = client.prepareDelete(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;)</div><div class="line">        .setOperationThreaded(false)</div><div class="line">        .get();</div></pre></td></tr></table></figure><h3 id="Delete-By-Query-API"><a href="#Delete-By-Query-API" class="headerlink" title="Delete By Query API"></a>Delete By Query API</h3><p>通过查询条件删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BulkByScrollResponse response =</div><div class="line">    DeleteByQueryAction.INSTANCE.newRequestBuilder(client)</div><div class="line">        .filter(QueryBuilders.matchQuery(&quot;gender&quot;, &quot;male&quot;)) //查询条件</div><div class="line">        .source(&quot;persons&quot;) //index(索引名)</div><div class="line">        .get();  //执行</div><div class="line"></div><div class="line">long deleted = response.getDeleted(); //删除文档的数量</div></pre></td></tr></table></figure><p>如果需要执行的时间比较长，可以使用异步的方式处理,结果在回调里面获取</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">DeleteByQueryAction.INSTANCE.newRequestBuilder(client)</div><div class="line">    .filter(QueryBuilders.matchQuery(&quot;gender&quot;, &quot;male&quot;))      //查询            </div><div class="line">    .source(&quot;persons&quot;)                //index(索引名)                                    </div><div class="line">    .execute(new ActionListener&lt;BulkByScrollResponse&gt;() &#123;     //回调监听     </div><div class="line">        @Override</div><div class="line">        public void onResponse(BulkByScrollResponse response) &#123;</div><div class="line">            long deleted = response.getDeleted();   //删除文档的数量                 </div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        public void onFailure(Exception e) &#123;</div><div class="line">            // Handle the exception</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h3 id="Update-API"><a href="#Update-API" class="headerlink" title="Update API"></a>Update API</h3><p>有两种方式更新索引：</p><ul><li>创建 <code>UpdateRequest</code>,通过client发送；</li><li>使用 <code>prepareUpdate()</code> 方法；</li></ul><h4 id="使用UpdateRequest"><a href="#使用UpdateRequest" class="headerlink" title="使用UpdateRequest"></a>使用UpdateRequest</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UpdateRequest updateRequest = new UpdateRequest();</div><div class="line">updateRequest.index(&quot;index&quot;);</div><div class="line">updateRequest.type(&quot;type&quot;);</div><div class="line">updateRequest.id(&quot;1&quot;);</div><div class="line">updateRequest.doc(jsonBuilder()</div><div class="line">        .startObject()</div><div class="line">            .field(&quot;gender&quot;, &quot;male&quot;)</div><div class="line">        .endObject());</div><div class="line">client.update(updateRequest).get();</div></pre></td></tr></table></figure><h4 id="使用-prepareUpdate-方法"><a href="#使用-prepareUpdate-方法" class="headerlink" title="使用 prepareUpdate() 方法"></a>使用 <code>prepareUpdate()</code> 方法</h4><blockquote><p>这里官方的示例有问题，new Script（）参数错误，所以一下代码是我自己写的（2017/11/10）</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">client.prepareUpdate(&quot;ttl&quot;, &quot;doc&quot;, &quot;1&quot;)</div><div class="line">        .setScript(new Script(&quot;ctx._source.gender = \&quot;male\&quot;&quot;  ,ScriptService.ScriptType.INLINE, null, null))//脚本可以是本地文件存储的，如果使用文件存储的脚本，需要设置 ScriptService.ScriptType.FILE </div><div class="line">        .get();</div><div class="line"></div><div class="line">client.prepareUpdate(&quot;ttl&quot;, &quot;doc&quot;, &quot;1&quot;)</div><div class="line">        .setDoc(jsonBuilder()   //合并到现有文档</div><div class="line">            .startObject()</div><div class="line">                .field(&quot;gender&quot;, &quot;male&quot;)</div><div class="line">            .endObject())</div><div class="line">        .get();</div></pre></td></tr></table></figure><h4 id="Update-by-script"><a href="#Update-by-script" class="headerlink" title="Update by script"></a>Update by script</h4><p>使用脚本更新文档 </p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UpdateRequest updateRequest = new UpdateRequest(&quot;ttl&quot;, &quot;doc&quot;, &quot;1&quot;)</div><div class="line">        .script(new Script(&quot;ctx._source.gender = \&quot;male\&quot;&quot;));</div><div class="line">client.update(updateRequest).get();</div></pre></td></tr></table></figure><h4 id="Update-by-merging-documents"><a href="#Update-by-merging-documents" class="headerlink" title="Update by merging documents"></a>Update by merging documents</h4><p>合并文档</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UpdateRequest updateRequest = new UpdateRequest(&quot;index&quot;, &quot;type&quot;, &quot;1&quot;)</div><div class="line">        .doc(jsonBuilder()</div><div class="line">            .startObject()</div><div class="line">                .field(&quot;gender&quot;, &quot;male&quot;)</div><div class="line">            .endObject());</div><div class="line">client.update(updateRequest).get();</div></pre></td></tr></table></figure><h4 id="Upsert"><a href="#Upsert" class="headerlink" title="Upsert"></a>Upsert</h4><p>更新插入,如果存在文档就更新，如果不存在就插入</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IndexRequest indexRequest = new IndexRequest(&quot;index&quot;, &quot;type&quot;, &quot;1&quot;)</div><div class="line">        .source(jsonBuilder()</div><div class="line">            .startObject()</div><div class="line">                .field(&quot;name&quot;, &quot;Joe Smith&quot;)</div><div class="line">                .field(&quot;gender&quot;, &quot;male&quot;)</div><div class="line">            .endObject());</div><div class="line">UpdateRequest updateRequest = new UpdateRequest(&quot;index&quot;, &quot;type&quot;, &quot;1&quot;)</div><div class="line">        .doc(jsonBuilder()</div><div class="line">            .startObject()</div><div class="line">                .field(&quot;gender&quot;, &quot;male&quot;)</div><div class="line">            .endObject())</div><div class="line">        .upsert(indexRequest); //如果不存在此文档 ，就增加 `indexRequest`</div><div class="line">client.update(updateRequest).get();</div></pre></td></tr></table></figure><p>如果 <code>index/type/1</code> 存在，类似下面的文档：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;  : &quot;Joe Dalton&quot;,</div><div class="line">    &quot;gender&quot;: &quot;male&quot;        </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果不存在，会插入新的文档：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot; : &quot;Joe Smith&quot;,</div><div class="line">    &quot;gender&quot;: &quot;male&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Multi-Get-API"><a href="#Multi-Get-API" class="headerlink" title="Multi Get API"></a>Multi Get API</h3><p>一次获取多个文档</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MultiGetResponse multiGetItemResponses = client.prepareMultiGet()</div><div class="line">    .add(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;) //一个id的方式</div><div class="line">    .add(&quot;twitter&quot;, &quot;tweet&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;) //多个id的方式</div><div class="line">    .add(&quot;another&quot;, &quot;type&quot;, &quot;foo&quot;)  //可以从另外一个索引获取</div><div class="line">    .get();</div><div class="line"></div><div class="line">for (MultiGetItemResponse itemResponse : multiGetItemResponses) &#123; //迭代返回值</div><div class="line">    GetResponse response = itemResponse.getResponse();</div><div class="line">    if (response.isExists()) &#123;      //判断是否存在                </div><div class="line">        String json = response.getSourceAsString(); //_source 字段</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>更多请浏览REST <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs-multi-get.html" target="_blank" rel="external">multi get</a> 文档</p><h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><p>Bulk API，批量插入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import static org.elasticsearch.common.xcontent.XContentFactory.*;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BulkRequestBuilder bulkRequest = client.prepareBulk();</div><div class="line"></div><div class="line">// either use client#prepare, or use Requests# to directly build index/delete requests</div><div class="line">bulkRequest.add(client.prepareIndex(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;)</div><div class="line">        .setSource(jsonBuilder()</div><div class="line">                    .startObject()</div><div class="line">                        .field(&quot;user&quot;, &quot;kimchy&quot;)</div><div class="line">                        .field(&quot;postDate&quot;, new Date())</div><div class="line">                        .field(&quot;message&quot;, &quot;trying out Elasticsearch&quot;)</div><div class="line">                    .endObject()</div><div class="line">                  )</div><div class="line">        );</div><div class="line"></div><div class="line">bulkRequest.add(client.prepareIndex(&quot;twitter&quot;, &quot;tweet&quot;, &quot;2&quot;)</div><div class="line">        .setSource(jsonBuilder()</div><div class="line">                    .startObject()</div><div class="line">                        .field(&quot;user&quot;, &quot;kimchy&quot;)</div><div class="line">                        .field(&quot;postDate&quot;, new Date())</div><div class="line">                        .field(&quot;message&quot;, &quot;another post&quot;)</div><div class="line">                    .endObject()</div><div class="line">                  )</div><div class="line">        );</div><div class="line"></div><div class="line">BulkResponse bulkResponse = bulkRequest.get();</div><div class="line">if (bulkResponse.hasFailures()) &#123;</div><div class="line">    // process failures by iterating through each bulk response item</div><div class="line">    //处理失败</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用-Bulk-Processor"><a href="#使用-Bulk-Processor" class="headerlink" title="使用 Bulk Processor"></a>使用 Bulk Processor</h3><p>BulkProcessor 提供了一个简单的接口，在给定的大小数量上定时批量自动请求</p><h4 id="创建BulkProcessor实例"><a href="#创建BulkProcessor实例" class="headerlink" title="创建BulkProcessor实例"></a>创建<code>BulkProcessor</code>实例</h4><p>首先创建<code>BulkProcessor</code>实例</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import org.elasticsearch.action.bulk.BackoffPolicy;</div><div class="line">import org.elasticsearch.action.bulk.BulkProcessor;</div><div class="line">import org.elasticsearch.common.unit.ByteSizeUnit;</div><div class="line">import org.elasticsearch.common.unit.ByteSizeValue;</div><div class="line">import org.elasticsearch.common.unit.TimeValue;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BulkProcessor bulkProcessor = BulkProcessor.builder(</div><div class="line">        client,  //增加elasticsearch客户端</div><div class="line">        new BulkProcessor.Listener() &#123;</div><div class="line">            @Override</div><div class="line">            public void beforeBulk(long executionId,</div><div class="line">                                   BulkRequest request) &#123; ... &#125; //调用bulk之前执行 ，例如你可以通过request.numberOfActions()方法知道numberOfActions</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void afterBulk(long executionId,</div><div class="line">                                  BulkRequest request,</div><div class="line">                                  BulkResponse response) &#123; ... &#125; //调用bulk之后执行 ，例如你可以通过request.hasFailures()方法知道是否执行失败</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void afterBulk(long executionId,</div><div class="line">                                  BulkRequest request,</div><div class="line">                                  Throwable failure) &#123; ... &#125; //调用失败抛 Throwable</div><div class="line">        &#125;)</div><div class="line">        .setBulkActions(10000) //每次10000请求</div><div class="line">        .setBulkSize(new ByteSizeValue(5, ByteSizeUnit.MB)) //拆成5mb一块</div><div class="line">        .setFlushInterval(TimeValue.timeValueSeconds(5)) //无论请求数量多少，每5秒钟请求一次。</div><div class="line">        .setConcurrentRequests(1) //设置并发请求的数量。值为0意味着只允许执行一个请求。值为1意味着允许1并发请求。</div><div class="line">        .setBackoffPolicy(</div><div class="line">            BackoffPolicy.exponentialBackoff(TimeValue.timeValueMillis(100), 3))//设置自定义重复请求机制，最开始等待100毫秒，之后成倍更加，重试3次，当一次或多次重复请求失败后因为计算资源不够抛出 EsRejectedExecutionException 异常，可以通过BackoffPolicy.noBackoff()方法关闭重试机制</div><div class="line">        .build();</div></pre></td></tr></table></figure><h4 id="BulkProcessor-默认设置"><a href="#BulkProcessor-默认设置" class="headerlink" title="BulkProcessor 默认设置"></a>BulkProcessor 默认设置</h4><ul><li>bulkActions  1000 </li><li>bulkSize 5mb</li><li>不设置flushInterval</li><li>concurrentRequests 为 1 ，异步执行</li><li>backoffPolicy 重试 8次，等待50毫秒</li></ul><h4 id="增加requests"><a href="#增加requests" class="headerlink" title="增加requests"></a>增加requests</h4><p>然后增加<code>requests</code>到<code>BulkProcessor</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bulkProcessor.add(new IndexRequest(&quot;twitter&quot;, &quot;tweet&quot;, &quot;1&quot;).source(/* your doc here */));</div><div class="line">bulkProcessor.add(new DeleteRequest(&quot;twitter&quot;, &quot;tweet&quot;, &quot;2&quot;));</div></pre></td></tr></table></figure></p><h4 id="关闭-Bulk-Processor"><a href="#关闭-Bulk-Processor" class="headerlink" title="关闭 Bulk Processor"></a>关闭 Bulk Processor</h4><p>当所有文档都处理完成，使用<code>awaitClose</code> 或 <code>close</code> 方法关闭<code>BulkProcessor</code>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bulkProcessor.awaitClose(10, TimeUnit.MINUTES);</div></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bulkProcessor.close();</div></pre></td></tr></table></figure><h4 id="在测试中使用Bulk-Processor"><a href="#在测试中使用Bulk-Processor" class="headerlink" title="在测试中使用Bulk Processor"></a>在测试中使用Bulk Processor</h4><p>如果你在测试种使用<code>Bulk Processor</code>可以执行同步方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">BulkProcessor bulkProcessor = BulkProcessor.builder(client, new BulkProcessor.Listener() &#123; /* Listener methods */ &#125;)</div><div class="line">        .setBulkActions(10000)</div><div class="line">        .setConcurrentRequests(0)</div><div class="line">        .build();</div><div class="line"></div><div class="line">// Add your requests</div><div class="line">bulkProcessor.add(/* Your requests */);</div><div class="line"></div><div class="line">// Flush any remaining requests</div><div class="line">bulkProcessor.flush();</div><div class="line"></div><div class="line">// Or close the bulkProcessor if you don&apos;t need it anymore</div><div class="line">bulkProcessor.close();</div><div class="line"></div><div class="line">// Refresh your indices</div><div class="line">client.admin().indices().prepareRefresh().get();</div><div class="line"></div><div class="line">// Now you can start searching!</div><div class="line">client.prepareSearch().get();</div></pre></td></tr></table></figure></p><p><a href="https://gitee.com/quanke/elasticsearch-java-study" target="_blank" rel="external">所有实例</a> 已经上传到Git</p><p>更多请浏览 <a href="https://github.com/quanke/spring-boot-starter-es" target="_blank" rel="external">spring-boot-starter-es</a> 开源项目</p><blockquote><p>如何有任何问题请关注微信公众号给我留言</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节介绍以下 CRUD API：&lt;/p&gt;
&lt;p&gt; 单文档  APIs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;document-apis/index-api.md&quot;&gt;Index API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;document-apis/get-ap
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://quanke.name/categories/es/"/>
    
    
      <category term="Elasticsearch" scheme="http://quanke.name/tags/es/"/>
    
      <category term="大数据" scheme="http://quanke.name/tags/bdaga/"/>
    
  </entry>
  
</feed>
